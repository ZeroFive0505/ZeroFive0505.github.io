---
layout: post
title: 불량 유저
date: 2021-07-23 08:00:11 +0900
categories: Programmers-Level3
---

# 불량 사용자
## 문제 링크 -> [Programmers](https://programmers.co.kr/learn/courses/30/lessons/64064)

# 풀이
DFS, 백트랙킹을 이용해서 푸는 문제였다. 풀이 방법이 잘 떠오르지 않아서 다른 사람들의 풀이를 참고해서 풀 수 있었다. 일단 중복을 방지하기 위해서 `set`을 이용하고 DFS를 호출할때마다 `num`변수에 비트 시프트 연산 후 OR로 해당 비트를 1로 만든다. 이러한 식으로 DFS를 진행하면서 만약 모든 불량 유저들을 확인했다면 `num`을 `set`에 넣는다.

# 코드
```c++
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <set>

using namespace std;

const int SIZE = 9;

bool check[SIZE];

set<int> s;

void DFS(vector<string>& user_id, vector<string>& banned_id, int idx, int num)
{
	if (idx == banned_id.size())
	{
		s.insert(num);
		return;
	}

	for (int i = 0; i < user_id.size(); i++)
	{
		if (check[i])
			continue;

		if (user_id[i].size() != banned_id[idx].size())
			continue;

		int j;
		for (j = 0; j < banned_id[idx].size(); j++)
		{
			if (banned_id[idx][j] == '*')
				continue;

			if (user_id[i][j] != banned_id[idx][j])
				break;
		}


		if (j == user_id[i].size())
		{
			check[i] = true;
			DFS(user_id, banned_id, idx + 1, num | (1 << i));
			check[i] = false;
		}
	}
}

int solution(vector<string> user_id, vector<string> banned_id)
{
	int answer = 0;
	DFS(user_id, banned_id, 0, 0);
	answer = s.size();
	return answer;
}
```