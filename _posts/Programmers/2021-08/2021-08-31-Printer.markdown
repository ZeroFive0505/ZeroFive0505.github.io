---
layout: post
title: 프린터
date: 2021-08-31 08:28:33 +0900
categories: Programmers-Level2
---

# 프린터
## 문제 링크 -> [Programmers](https://programmers.co.kr/learn/courses/30/lessons/42587)

# 풀이
리스트를 이용해서 풀었다. 먼저 가장앞에 있는 작업을 꺼내고 다시 한번 순회를한다. 우선순위가 더 높은게 있다면 다시 넣고 빠져나온다. 만약 더 높은 우선순위가 없다면 기록을하고 마지막으로는 원하는 작업이 언제 처리됬는지를 처리한다.

# 코드
```c++
#include <iostream>
#include <list>
#include <string>
#include <vector>

using namespace std;

int solution(vector<int> priorities, int location) 
{
    int answer = 0;
    list<pair<int, int>> jobs;
    vector<pair<int, int>> prints;
    pair<int, int> target = { priorities[location], location };

    for (int i = 0; i < priorities.size(); i++)
        jobs.push_back({ priorities[i], i });


    while (!jobs.empty())
    {
        pair<int, int> f = jobs.front();
        jobs.pop_front();
        list<pair<int, int>>::iterator it;
        bool top = true;
        for (it = jobs.begin(); it != jobs.end(); it++)
        {
            // 만약 더 높은 우선순위가 있다면
            if (f.first < (*it).first)
            {
                // 뒤에넣는다.
                jobs.push_back(f);
                top = false;
                break;
            }
        }

        // 만약 최고 우선순위라면 그대로 기록한다.
        if (top)
            prints.push_back(f);
    }

    for (int i = 0; i < prints.size(); i++)
    {
        if (prints[i] == target)
        {
            answer = i + 1;
            break;
        }
    }


    return answer;
}
```