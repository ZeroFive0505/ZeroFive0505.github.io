---
layout: post
title: 추석 트래픽
date: 2021-07-16 08:58:11 +0900
categories: Programmers-Level3
---

# 추석 트래픽
## 문제 링크 -> [Programmers](https://programmers.co.kr/learn/courses/30/lessons/17676)

# 풀이
시간의 계산을 꼼꼼히 해야하는 문제다. 최소 단위가 밀리 초이니 시간, 분, 초를 밀리 초로 바꾸고 또한 시작 시간과 끝난 시간을 정확히 계산 해야한다. 문제의 예에서는 

>`2016-09-15 03:10:33.020 0.011s은 "2016년 9월 15일 오전 3시 10분 33.010초"부터 "2016년 9월 15일 오전 3시 10분 33.020초"까지 "0.011초" 동안 처리된 요청을 의미한다.` 

이렇게 나와있는데 즉 전체 시간에서 걸린 시간을 빼고 1을 더하면 요청의 시작 시간이 된다. 요청이 끝난 시간은 로그에 나와있는 시간 그대로이다.
이렇게 시간을 밀리 초 단위로 바꾸고 반복문을 돌면서 끝난 시간에서 1초 후에 응답여부 즉, 처리가 됬는지 안 됬는지 여부는 신경쓰지 않고 가장 많은 갯수를 구해서 반환하면 된다.

# 코드
```c++
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int solution(vector<string> lines) 
{
    int answer = 0;
    vector<int> start;
    vector<int> end;

    for (int i = 0; i < lines.size(); i++)
    {
        string log = lines[i];

        string hourStr = log.substr(11, 2);
        string minStr = log.substr(14, 2);
        string secString = log.substr(17, 2);
        string miliSec = log.substr(20, 3);

        string durationStr = log.substr(24, 5);

        int hours = stoi(hourStr) * 3600 * 1000;
        int minutes = stoi(minStr) * 60 * 1000;
        int seconds = stoi(secString) * 1000 + stoi(miliSec);
        int duration = stof(durationStr) * 1000;

        start.push_back(hours + minutes + seconds - duration + 1);
        end.push_back(hours + minutes + seconds);
    }


    for (int i = 0; i < lines.size(); i++)
    {
        int endTime = end[i] + 1000;
        int cnt = 0;
        for (int j = i; j < lines.size(); j++)
        {
            if (start[j] < endTime)
                cnt++;
        }

        answer = max(answer, cnt);
    }

    return answer;
}
```