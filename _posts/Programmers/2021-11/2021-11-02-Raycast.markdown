---
layout: post
title: 빛의 경로 사이클
date: 2021-11-02 08:06:34 +0900
categories: Programmers-Level2
---

# 빛의 경로 사이클
## 문제 링크 -> [Programmers](https://programmers.co.kr/learn/courses/30/lessons/86052?language=cpp#)

# 풀이
어떤식으로 사이클을 체크해야할지 잘 감이안와서 [이 곳](https://yabmoons.tistory.com/709)에서 아이디어를 얻고 그대로 구현해봤다. 방문배열은 총 3차원 배열로 좌표와 방향으로 이뤄져 만약 같은 좌표에 같은 방향으로 온적이 있다면 무한 반복문을 빠져나가게하고 만약 길이가 0이 아니라면 정답 배열에 추가한다. 방향의 경우 오른쪽 방향을 기준으로 0 아래로 1, 반대편으로 2, 위로는 3으로 설정하여 적절히 좌우측 회전을 시켰다. 그리고 항상 배열의 값을 조회할때는 나머지 연산을 통해 접근하고 만약 좌표가 음수로 간다면 최대치로 만들어줬다.

# 코드
```c++
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 500;
const int DIR = 4;

int row;
int col;

struct sPos
{
    int x;
    int y;

    void operator+=(const sPos& rhs)
    {
        x += rhs.x;
        y += rhs.y;
    }

}Delta[] = {
    {1, 0},
    {0, 1},
    {-1, 0},
    {0, -1}
};

bool visited[MAX][MAX][DIR] = {};


void RayCast(int i, int j, int dir, vector<string>& grid, vector<int>& answer)
{
    int len = 0;
    sPos cur = { j, i };
    int currentDir = dir;
    while (1)
    {
        if (!visited[cur.y % row][cur.x % col][currentDir])
        {
            visited[cur.y % row][cur.x % col][currentDir] = true;
            len++;
        }
        else if (visited[cur.y % row][cur.x % col][currentDir])
            break;

        switch (grid[cur.y % row][cur.x % col])
        {
        case 'S':
        {
            cur += Delta[currentDir];
            if (cur.x < 0)
                cur.x = col - 1;
            
            if (cur.y < 0)
                cur.y = row - 1;
        }
            break;
        case 'L':
        {
            currentDir = (currentDir + 3) % 4;

            cur += Delta[currentDir];

            if (cur.x < 0)
                cur.x = col - 1;

            if (cur.y < 0)
                cur.y = row - 1;
        }
            break;
        case 'R':
        {
            currentDir = (currentDir + 1) % 4;

            cur += Delta[currentDir];

            if (cur.x < 0)
                cur.x = col - 1;

            if (cur.y < 0)
                cur.y = row - 1;
        }
            break;
        }
    }

    if (len != 0)
        answer.push_back(len);
}


vector<int> solution(vector<string> grid) 
{
    vector<int> answer;

    row = grid.size();
    col = grid[0].size();

    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            for (int dir = 0; dir < 4; dir++)
            {
                RayCast(i, j, dir, grid, answer);
            }
        }
    }

    sort(answer.begin(), answer.end());

    return answer;
}
```