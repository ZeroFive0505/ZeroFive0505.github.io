---
layout: post
title: Unity Topdown #8
date: 2022-07-02 10:14:05 +0900
categories: Unity
---

# 추가 아이템 및 상자 파괴효과

![Imgur](https://imgur.com/AOkCIjo.gif)

새롭게 추가된 아이템으로 플레이어 주변을 위성처럼 돌아다니면서 따라오고 플레이어가 투사체를 발사할시 같이 발사하는 방식이다. 또한 기존의 상자 모델링에서 새로운 모델로 바꿨고 파괴시 효과도 추가했다.

![Imgur](https://imgur.com/1949sRB.gif)

적의 투사체를 한번 막아주는 기능을 가지고 있다.

# 새롭게 추가된 무기

![Imgur](https://imgur.com/FXmFE3Z.gif)

투사체와 투사체를 따라다니는 파티클을 제작 이렇게 만들어진 투사체와 충돌시 생겨나는 이펙트를 이용해서 새로운 무기를 추가했다.

# 아이템 드랍 모델링 변경
기존에 노란 큐브, 파란 큐브에서 이런식으로 간단한 로우 폴리 모델링을 만들어서  아래과 같이 변경했다.
비록 로우 폴리 모델링 이지만 겉모습으로 바로 어떤 무기인지 알 수 있게 특징을 좀 살려서 만들었다.. 아마도..

![Imgur](https://imgur.com/LHY1WTm.png)

![Imgur](https://imgur.com/DLG1an5.png)

![Imgur](https://imgur.com/YWPDtAL.png)

![Imgur](https://imgur.com/XgDZqZi.png)

위와같이 이제 큐브가 아니라 저런식으로 드랍된 무기들을 볼 수 있게 됬다.

![Imgur](https://imgur.com/95C7p02.gif)

새롭게 추가된 무기는 로켓 런처로 충돌시에 일정 반경의 모든 적에게 데미지를 준다. 충돌시 생성되는 이펙트도 따로 만들었다.


# 오브젝트 풀링과 시행 착오들

플레이어의 투사체를 오브젝트 풀링 작업을 했는데 새롭게 추가된 로켓보다는 기존에 있는 무기들과 새롭게 추가된 아이템 때문에 생성되는 게임 오브젝트들이 생겨서 이것 때문에 그동안 미뤄왔던 최적화 작업을 시작했다.

인터넷에서 오브젝트 풀링 자료를 찾다가 유니티에서 비교적 최근에 만들어져서 제공된 풀링 기능이 있다는 사실을 알게 되고 이것을 이용해보고자 했다.

베이스클래스는 [이 곳](https://github.com/Matthew-J-Spencer/Object-Pooler)의 코드를 이용했다.

```cs
public abstract class PoolBase<T> : MonoBehaviour where T : MonoBehaviour
{
    private T prefab;
    private ObjectPool<T> pool;

    private ObjectPool<T> Pool
    {
        get
        {
            if (pool == null)
                throw new InvalidOperationException("You need to call InitPool before using it.");
            return pool;
        }
        set => pool = value;
    }

    protected void InitPool(T _prefab, int initCapacity = 10, int maxCapacity = 20, bool collectionCheck = false)
    {
        prefab = _prefab;
        Pool = new ObjectPool<T>(
            CreateSetup,
            GetSetup,
            ReleaseSetup,
            DestroySetup,
            collectionCheck,
            initCapacity,
            maxCapacity
            );
    }

    #region Overrides
    protected virtual T CreateSetup() => Instantiate(prefab);
    protected virtual void GetSetup(T obj) => obj.gameObject.SetActive(true);
    protected virtual void ReleaseSetup(T obj) => obj.gameObject.SetActive(false);
    protected virtual void DestroySetup(T obj) => Destroy(obj);

    #endregion

    #region Getters
    public T Get() => Pool.Get();
    public void Release(T obj) => Pool.Release(obj);

    #endregion
}

```

아래는 위의 풀링 베이스클래스를 상속받아서 플레이어의 투사체 전용 풀링을 만들었다.

```cs
public class PlayerProjectilePool : PoolBase<PlayerProjectile>
{
    // 풀링할 오브젝트
    [SerializeField] private PlayerProjectile playerProjectile;
    // 최초 풀의 양
    [SerializeField] int initCapacty = 100;
    // 최대 풀
    [SerializeField] int maxCapacity = 200;

    private void Start()
    {
        // 오브젝트, 최소 시작 갯수, 최대 갯수, 콜렉션 체크
        InitPool(playerProjectile, initCapacty, maxCapacity, true);
    }
}
```

유니티에서 제공되는 풀링의 사용방법은 간단하다.

```cs
if(weapon.usePool)
{
    // 풀을 이용할경우 풀에서 Get을 이용하셔 가져온다.
    PlayerProjectile projectileGameManager.InstanplayerProjectilePool.Get();
    if (projectile.gameObjeGetComponent<TrailRenderer>())
        projectile.gameObjeGetComponent<TrailRender().enabled = false;
    projectile.gameObjeGetComponent<Rigidbody>velocity = Vector3.zero;
    projectile.gameObjeGetComponent<Rigidbody>angularVelocity = Vector3.zero;
    projectile.gameObject.transfoposition = muzzle.position;
    projectile.gameObject.transforotation = muzzle.rotation;
    projectile.gameObjeGetComponent<PlayerProjectile.InitProjectile(weapotransform.position);
    if (projectile.gameObjeGetComponent<TrailRenderer>())
        projectile.gameObjeGetComponent<TrailRender().enabled = true;
    projectiGetComponent<Rigidbody>AddForce(dir * weapshotForce, ForceMode.Impulse
}
else
{
    GameObject projectileInstantiate(weapprojectilePrefab, muzzposition, muzzle.rotation
    projectiGetComponent<Rigidbody>AddForce(dir * weapshotForce, ForceMode.Impulse);
    projectiGetComponent<PlayerProjectile.InitProjectile(weapotransform.position);
}
```

풀을 이용할 경우 간단하게 Get()을 이용하여 가져온다. 투사체를 가져올 경우 트레일 렌더러를 잠시 껐다가 켰는데 이러한 작업을 하지 않으면 충돌 즉시 반환된 투사체를 다시 쏘게될경우 트레일이 충돌 장소에서 발사 장소로 길게 생성이 되서 이를 방지하기 위해서 위와같이 트레일을 껐다 키고 또한 투사체 자체에서도 풀에서 얻어올때 트레일을 깨끗하게 한번 지우는 것으로 깔끔한 트레일을 얻을 수 있었다.

```cs
// 반환된 투사체를 다시 얻어올때는 트레일을 깔끔하게 한번 지운다.
private void OnEnable()
{
    if(GetComponent<TrailRenderer>())
        GetComponent<TrailRenderer>().Clea();
}
```

```cs
if(gameObject.activeInHierarchy)
    GameManager.Instance.playerProjectilePool.Release(this);
```

풀에 반환하는 경우는 Release를 이용해서 반환하면 된다. 반환하기전에 먼저 활성화 되어있는지를 판단했는데 이 조건문이 없으면 이상하게도 이미 풀에 반환되어 있는 객체를 또 반환하려한다고 오류가 떠서 이걸로 해결 할 수 있었다.