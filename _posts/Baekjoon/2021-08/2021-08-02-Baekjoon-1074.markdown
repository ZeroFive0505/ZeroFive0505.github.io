---
layout: post
title: Z
date:  2021-08-02 12:33:19 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/1074)
# Z

# 문제
> 한수는 크기가 2N × 2N인 2차원 배열을 Z모양으로 탐색하려고 한다. 예를 들어, 2×2배열을 왼쪽 위칸, 오른쪽 위칸, 왼쪽 아래칸, 오른쪽 아래칸 순서대로 방문하면 Z모양이다.

> ![img](https://upload.acmicpc.net/21c73b56-5a91-43aa-b71f-9b74925c0adc/-/preview/)

> 만약, N > 1이 라서 왼쪽 위에 있는 칸이 하나가 아니라면, 배열을 크기가 2N-1 × 2N-1로 4등분 한 후에 재귀적으로 순서대로 방문한다. 다음 예는 22 × 22 크기의 배열을 방문한 순서이다.

> ![img](https://upload.acmicpc.net/adc7cfae-e84d-4d5c-af8e-ee011f8fff8f/-/preview/)

> N이 주어졌을 때, r행 c열을 몇 번째로 방문하는지 출력하는 프로그램을 작성하시오. 
다음은 N=3일 때의 예이다.

> ![img](https://upload.acmicpc.net/d3e84bb7-9424-4764-ad3a-811e7fcbd53f/-/preview/)

# 입력
> 첫째 줄에 정수 N, r, c가 주어진다.

# 출력
> r행 c열을 몇 번째로 방문했는지 출력한다.

# 풀이
정확한 풀이는 [이 곳](https://www.youtube.com/watch?v=8vDDJm5EewM&t=1714s)에서 확인 할 수 있다.
N = K일때의 값을 구하면 K + 1의 정답을 구할때 쓸 수 있으며 이는 재귀적으로 표현이 가능하다.

# 코드
```c++
#include <iostream>

using namespace std;

int N, r, c;

int Z(int n, int r, int c)
{
    // 기저 조건.
	if (n == 0)
		return 0;

    // 1을 n - 1번 왼쪽으로 이동시키면 2로 나눈 값이 된다.
	int half = 1 << (n - 1);

    // 1사분면의 값을 구한다.
	if (r < half && c < half)
		return Z(n - 1, r, c);

    // 2사분면의 값을 구한다 이때 half의 제곱을 더해준다. 왜냐하면 1사분면의 정사각형의
    // 넓이 만큼 더해 주면 2사분면에서의 정확한 위치가 나온다.
	if (r < half && c >= half)
		return half * half + Z(n - 1, r, c - half);

    // 3사분면의 경우 먼저 방문한 정사각형의 갯수가 2개이므로(1사분면, 2사분면) 넓이에 2를 곱해준다.
	if (r >= half && c < half)
		return 2 * half * half + Z(n - 1, r - half, c);

    // 4사분면의 경우 3개의 정사각형을 먼저 방문했으니 이를 더해준다.
	if (r >= half && c >= half)
		return 3 * half * half + Z(n - 1, r - half, c - half);
}

int main()
{
	cin >> N >> r >> c;


	cout << Z(N, r, c) << "\n";

	return 0;
}
```