---
layout: post
title: 로또
date:  2021-08-17 08:27:45 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/6603)
# 로또

# 문제
> 독일 로또는 {1, 2, ..., 49}에서 수 6개를 고른다.
로또 번호를 선택하는데 사용되는 가장 유명한 전략은 49가지 수 중 k(k>6)개의 수를 골라 집합 S를 만든 다음 그 수만 가지고 번호를 선택하는 것이다.
예를 들어, k=8, S={1,2,3,5,8,13,21,34}인 경우 이 집합 S에서 수를 고를 수 있는 경우의 수는 총 28가지이다. ([1,2,3,5,8,13], [1,2,3,5,8,21], [1,2,3,5,8,34], [1,2,3,5,13,21], ..., [3,5,8,13,21,34])
집합 S와 k가 주어졌을 때, 수를 고르는 모든 방법을 구하는 프로그램을 작성하시오.

# 입력
> 입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 테스트 케이스는 한 줄로 이루어져 있다. 첫 번째 수는 k (6 < k < 13)이고, 다음 k개 수는 집합 S에 포함되는 수이다. S의 원소는 오름차순으로 주어진다.
입력의 마지막 줄에는 0이 하나 주어진다. 

# 출력
> 각 테스트 케이스마다 수를 고르는 모든 방법을 출력한다. 이때, 사전 순으로 출력한다. 각 테스트 케이스 사이에는 빈 줄을 하나 출력한다.

# 풀이
먼저 K개만큼 수를 입력받고 정렬한다. 그 이후 재귀호출을 하면서 백트랙킹을 하는데 사용하지 않았거나 전의 전의 값보다 더 큰 경우만 재귀 호출을 하도록한다. 재귀 호출을 할때는 인덱스를 같이 전달해 항상 더 큰 값을 사용한다.

# 코드
```c++
#include <iostream>
#include <algorithm>

using namespace std;

int K;

const int SIZE = 13;
int arr[SIZE];
int output[SIZE];
bool used[SIZE];

const int INF = 987654321;

void recur(int depth, int index)
{
	if (depth == 6)
	{
		for (int i = 0; i < 6; i++)
			cout << output[i] << " ";
		cout << "\n";
		return;
	}

	int last = INF;
	for (int i = index; i < K; i++)
	{
		if (!used[i] || last < arr[i])
		{
			used[i] = true;
			last = arr[i];
			output[depth] = arr[i];
			recur(depth + 1, i + 1);
			used[i] = false;
		}
	}
}

int main()
{
	while (true)
	{
		cin >> K;

		if (K == 0)
			break;

		for (int i = 0; i < K; i++)
			cin >> arr[i];

		sort(arr, arr + K);

		recur(0, 0);

		cout << "\n";
	}

	return 0;
}
```