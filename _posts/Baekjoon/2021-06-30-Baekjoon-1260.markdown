---
layout: post
title: DFS와 BFS
date: 2021-06-30 09:57:59 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/1260)
# DFS와 BFS

# 문제
> 그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.

# 입력
> 첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.

# 출력
> 첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.

# 풀이
그래프 탐색의 기초 DFS, BFS 문제였다. 출력에서는 정점이 작은 순서대로 출력되기를 원하므로 입력을 다 받고나서 정렬 후 탐색을 해주면 되겠다.

# 코드
```C++
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

void DFS(vector<vector<int>>& graph, vector<bool>& visited, int v)
{
	visited[v] = true;
	cout << v << " ";
	for (int i = 0; i < graph[v].size(); i++)
	{
		if (!visited[graph[v][i]])
		{
			DFS(graph, visited, graph[v][i]);
		}
	}
}

void BFS(vector<vector<int>>& graph, vector<bool>& visited, int v)
{
	queue<int> q;
	q.push(v);

	visited[v] = true;

	while (!q.empty())
	{
		int current = q.front();
		cout << current << " ";
		q.pop();

		for (int i = 0; i < graph[current].size(); i++)
		{
			if (!visited[graph[current][i]])
			{
				q.push(graph[current][i]);
				visited[graph[current][i]] = true;
			}
		}
	}
}

int main()
{
	int N, M;
	int V;
	cin >> N >> M >> V;
	vector<vector<int>> graph(N + 1);
	vector<bool> visited(N + 1, false);

	for (int i = 0; i < M; i++)
	{
		int u;
		int v;
		cin >> u >> v;
		graph[u].push_back(v);
		graph[v].push_back(u);
	}

	for (int i = 0; i < graph.size(); i++)
	{
		sort(graph[i].begin(), graph[i].end());
	}

	DFS(graph, visited, V);
	cout << "\n";
	fill(visited.begin(), visited.end(), false);

	BFS(graph, visited, V);
	cout << "\n";

	return 0;
}
```