---
layout: post
title: 1로 만들기
date: 2022-04-22 08:13:03 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/1463)
# 1로 만들기

# 문제
> 정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.
> 1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
> 2. X가 2로 나누어 떨어지면, 2로 나눈다.
> 3. 1을 뺀다.

>정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.

# 입력
> 첫째 줄에 1보다 크거나 같고, 106보다 작거나 같은 정수 N이 주어진다.

# 출력
> 첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.

# BFS를 이용한 풀이
1까지의 도달하는 최소 계산 횟수를 구하는 방식으로 문제를 풀 수 있었다. 큐에 모든 데이터를 넣는게 아니라 만약 현재 기록된 최소 도달 횟수보다 작을 경우만 큐에 새롭게 넣는 방식으로 메모리 초과 문제를 해결 할 수 있었다.

```c++
#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

const int MAX = 1000001;

const int INF = 987654321;

int X;

int ans = INF;

int arr[MAX] = {};


int main()
{
	cin >> X;

	queue<pair<int, int>> q;

	for (int i = 0; i < MAX; i++)
	{
		arr[i] = INF;
	}

	q.push({ X, 0 });

	while (!q.empty())
	{
		pair<int, int> cur = q.front();
		q.pop();

		if (cur.first == 1)
		{
			ans = min(ans, cur.second);
			continue;
		}

		if (cur.first % 3 == 0)
		{
			int there = cur.first / 3;
            // 최소 도달 횟수 비교 그냥 큐에 계속 넣으면 메모리 초과 발생..
			if (arr[there] > cur.second + 1)
			{
				arr[there] = cur.second + 1;
				q.push({ there, cur.second + 1 });
			}
		}

		if (cur.first % 2 == 0)
		{
			int there = cur.first / 2;
             // 최소 도달 횟수 비교 그냥 큐에 계속 넣으면 메모리 초과 발생..
			if (arr[there] > cur.second + 1)
			{
				arr[there] = cur.second + 1;
				q.push({ there, cur.second + 1 });
			}
		}
		
		if (cur.first > 1)
		{
			int there = cur.first - 1;
             // 최소 도달 횟수 비교 그냥 큐에 계속 넣으면 메모리 초과 발생..
			if (arr[there] > cur.second + 1)
			{
				arr[there] = cur.second + 1;
				q.push({ cur.first - 1, cur.second + 1 });
			}
		}
		
	}

	cout << ans << "\n";

	return 0;
}
```

# Tabulation을 이용한 풀이
N에서 1까지가 아닌 1에서 N까지 최소 도달 횟수를 구하는 방식으로 풀 수 있었다.

```c++
#include <iostream>
#include <algorithm>

using namespace std;

const int MAX = 1000001;

int tab[MAX] = {};

int N;

int main()
{
	cin >> N;

	tab[1] = 0;

	for (int i = 2; i <= N; i++)
	{
		tab[i] = tab[i - 1] + 1;

		if (i % 2 == 0)
			tab[i] = min(tab[i], tab[i / 2] + 1);

		if (i % 3 == 0)
			tab[i] = min(tab[i], tab[i / 3] + 1);
	}

	cout << tab[N] << "\n";

	return 0;
}
```