---
layout: post
title: 벽 부수고 이동하기 3
date: 2022-04-21 10:29:03 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/16933)
# 벽 부수고 이동하기 3

# 문제
> N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다. 당신은 (1, 1)에서 (N, M)의 위치까지 이동하려 하는데, 이때 최단 경로로 이동하려 한다. 최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데, 이때 시작하는 칸과 끝나는 칸도 포함해서 센다. 이동하지 않고 같은 칸에 머물러있는 경우도 가능하다. 이 경우도 방문한 칸의 개수가 하나 늘어나는 것으로 생각해야 한다.
이번 문제에서는 낮과 밤이 번갈아가면서 등장한다. 가장 처음에 이동할 때는 낮이고, 한 번 이동할 때마다 낮과 밤이 바뀌게 된다. 이동하지 않고 같은 칸에 머무르는 경우에도 낮과 밤이 바뀌게 된다.
만약에 이동하는 도중에 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 벽을 K개 까지 부수고 이동하여도 된다. 단, 벽은 낮에만 부술 수 있다.
한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸이다.
맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오.

# 입력
> 첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 1,000), K(1 ≤ K ≤ 10)이 주어진다. 다음 N개의 줄에 M개의 숫자로 맵이 주어진다. (1, 1)과 (N, M)은 항상 0이라고 가정하자.

# 출력
> 첫째 줄에 최단 거리를 출력한다. 불가능할 때는 -1을 출력한다.

# 첫 시도
예제의 경우에는 답을 제대로 출력하기에 한번 제출해봤지만 디버깅시에 큐에 방문했던 곳을 다시 방문하게되면서 큐가 쓸데없이 늘어났는데 그것 때문인지 메모리 초과가 떴다.

```c++
#include <iostream>
#include <queue>
#include <string>
#include <algorithm>

using namespace std;

const int MAX = 1000;
const int DAY = 0;
const int NIGHT = 1;

int N, M, K;

int arr[MAX][MAX] = {};
bool visited[2][10][MAX][MAX] = {};

struct sPos
{
	int r;
	int c;
	int wallBreaks;
	int moveCnt;
	int day;

	sPos(int _r, int _c, int _wallBreaks, int _moveCnt, int _day) :
		r(_r), c(_c), wallBreaks(_wallBreaks), moveCnt(_moveCnt), day(_day)
	{
	}
};

struct sDelta
{
	int r;
	int c;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

int BFS()
{
	queue<sPos> q;

	q.push(sPos(0, 0, 0, 1, DAY));

	visited[DAY][0][0][0] = true;

	while (!q.empty())
	{
		sPos cur = q.front();
		int r = cur.r;
		int c = cur.c;
		q.pop();

		if (r == N - 1 && c == M - 1)
			return cur.moveCnt;

		for (int i = 0; i < 4; i++)
		{
			int nr = r + Delta[i].r;
			int nc = c + Delta[i].c;

			if (nr < 0 || nc < 0 || nr >= N || nc >= M)
				continue;

			if (visited[cur.day][cur.wallBreaks][nr][nc])
				continue;

			if (arr[nr][nc] == 1 && cur.wallBreaks < K && cur.day == DAY)
			{
				int newDay = (cur.day + 1) % 2;
				sPos newPos(nr, nc, cur.wallBreaks + 1, cur.moveCnt + 1, newDay);
				visited[newDay][cur.wallBreaks][nr][nc] = true;
				q.push(newPos);
			}
			else if (arr[nr][nc] == 1 && cur.wallBreaks < K  && cur.day == NIGHT)
			{
				int newDay = (cur.day + 1) % 2;
				sPos newPos(r, c, cur.wallBreaks, cur.moveCnt + 1, newDay);
				q.push(newPos);
			}
			else if(arr[nr][nc] == 0)
			{
				int newDay = (cur.day + 1) % 2;
				sPos newPos(nr, nc, cur.wallBreaks, cur.moveCnt + 1, newDay);
				visited[newDay][cur.wallBreaks][nr][nc] = true;
				q.push(newPos);
			}
		}
	}

	return -1;
}

int main()
{
	cin >> N >> M >> K;

	string s;

	for (int i = 0; i < N; i++)
	{
		cin >> s;
		int length = s.length();

		for (int j = 0; j < length; j++)
		{
			arr[i][j] = s[j] - '0';
		}
	}

	cout << BFS() << "\n";

	return 0;
}
```

# 두번째 시도
방문배열을 검사할시에 현재 시간뿐만 아니라 이동 후 시간에서도 방문이 되었는지를 판단하는 if문을 추가해서 메모리 초과는 없어졌으나 약 22%에서 오답처리가 됬다. 게시판에 반례도 해봤는데 답을 제대로 출력하는데...

```c++
#include <iostream>
#include <queue>
#include <string>
#include <algorithm>

using namespace std;

const int MAX = 1000;
const int DAY = 0;
const int NIGHT = 1;

int N, M, K;

int arr[MAX][MAX] = {};
bool visited[2][11][MAX][MAX] = {};

struct sPos
{
	int r;
	int c;
	int wallBreaks;
	int moveCnt;
	int day;

	sPos(int _r, int _c, int _wallBreaks, int _moveCnt, int _day) :
		r(_r), c(_c), wallBreaks(_wallBreaks), moveCnt(_moveCnt), day(_day)
	{
	}
};

struct sDelta
{
	int r;
	int c;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

int BFS()
{
	queue<sPos> q;

	q.push(sPos(0, 0, 0, 1, DAY));

	visited[DAY][0][0][0] = true;

	while (!q.empty())
	{
		sPos cur = q.front();
		int r = cur.r;
		int c = cur.c;
		q.pop();

		if (r == N - 1 && c == M - 1)
			return cur.moveCnt;

		for (int i = 0; i < 4; i++)
		{
			int nr = r + Delta[i].r;
			int nc = c + Delta[i].c;

			if (nr < 0 || nc < 0 || nr >= N || nc >= M)
				continue;

            if (visited[cur.day][cur.wallBreaks][nr][nc])
				continue;

			if (visited[(cur.day + 1) % 2][cur.wallBreaks][nr][nc])
				continue;

			if (arr[nr][nc] == 1 && cur.wallBreaks < K && cur.day == DAY)
			{
				int newDay = (cur.day + 1) % 2;
				sPos newPos(nr, nc, cur.wallBreaks + 1, cur.moveCnt + 1, newDay);
				visited[newDay][cur.wallBreaks][nr][nc] = true;
				q.push(newPos);
			}
			else if (arr[nr][nc] == 1 && cur.wallBreaks < K  && cur.day == NIGHT)
			{
				int newDay = (cur.day + 1) % 2;
				sPos newPos(r, c, cur.wallBreaks, cur.moveCnt + 1, newDay);
				q.push(newPos);
			}
			else if(arr[nr][nc] == 0)
			{
				int newDay = (cur.day + 1) % 2;
				sPos newPos(nr, nc, cur.wallBreaks, cur.moveCnt + 1, newDay);
				visited[newDay][cur.wallBreaks][nr][nc] = true;
				q.push(newPos);
			}
		}
	}

	return -1;
}

int main()
{
	cin >> N >> M >> K;

	string s;

	for (int i = 0; i < N; i++)
	{
		cin >> s;
		int length = s.length();

		for (int j = 0; j < length; j++)
		{
			arr[i][j] = s[j] - '0';
		}
	}

	cout << BFS() << "\n";

	return 0;
}
```

# 세번째 시도
인터넷을 찾아다녀보다가 K의 범위를 혹시 내가 잘 못 본것이 아닌가 싶어서 보니 K의 값은 0 부터 10 이하까지였다.. 따라서 방문배열에 10을 넣을게아니라 11을 넣어야했다.. 그렇게 고쳐서 제출하니 통과가 됬다.

```c++
#include <iostream>
#include <queue>
#include <string>
#include <algorithm>

using namespace std;

const int MAX = 1000;
const int DAY = 0;
const int NIGHT = 1;

int N, M, K;

int arr[MAX][MAX] = {};
bool visited[2][11][MAX][MAX] = {};

struct sPos
{
	int r;
	int c;
	int wallBreaks;
	int moveCnt;
	int day;

	sPos(int _r, int _c, int _wallBreaks, int _moveCnt, int _day) :
		r(_r), c(_c), wallBreaks(_wallBreaks), moveCnt(_moveCnt), day(_day)
	{
	}
};

struct sDelta
{
	int r;
	int c;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

int BFS()
{
	queue<sPos> q;

	q.push(sPos(0, 0, 0, 1, DAY));

	visited[DAY][0][0][0] = true;

	while (!q.empty())
	{
		sPos cur = q.front();
		int r = cur.r;
		int c = cur.c;
		q.pop();

		if (r == N - 1 && c == M - 1)
			return cur.moveCnt;

		for (int i = 0; i < 4; i++)
		{
			int nr = r + Delta[i].r;
			int nc = c + Delta[i].c;

			if (nr < 0 || nc < 0 || nr >= N || nc >= M)
				continue;

			if (visited[(cur.day + 1) % 2][cur.wallBreaks][nr][nc])
				continue;

			if (arr[nr][nc] == 1 && cur.wallBreaks < K && cur.day == DAY)
			{
				int newDay = (cur.day + 1) % 2;
				sPos newPos(nr, nc, cur.wallBreaks + 1, cur.moveCnt + 1, newDay);
				visited[newDay][cur.wallBreaks][nr][nc] = true;
				q.push(newPos);
			}
			else if (arr[nr][nc] == 1 && cur.wallBreaks < K  && cur.day == NIGHT)
			{
				int newDay = (cur.day + 1) % 2;
				sPos newPos(r, c, cur.wallBreaks, cur.moveCnt + 1, newDay);
				q.push(newPos);
			}
			else if(arr[nr][nc] == 0)
			{
				int newDay = (cur.day + 1) % 2;
				sPos newPos(nr, nc, cur.wallBreaks, cur.moveCnt + 1, newDay);
				visited[newDay][cur.wallBreaks][nr][nc] = true;
				q.push(newPos);
			}
		}
	}

	return -1;
}

int main()
{
	cin >> N >> M >> K;

	string s;

	for (int i = 0; i < N; i++)
	{
		cin >> s;
		int length = s.length();

		for (int j = 0; j < length; j++)
		{
			arr[i][j] = s[j] - '0';
		}
	}

	cout << BFS() << "\n";

	return 0;
}
```