---
layout: post
title: 계단 오르기
date: 2022-04-22 09:03:23 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/2579)
# 계단 오르기

# 문제
> 계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다. <그림 1>과 같이 각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는 점수를 얻게 된다.

| ![그림 1.jpg](https://upload.acmicpc.net/7177ea45-aa8d-4724-b256-7b84832c9b97/-/preview/) | 
|:--:| 
| *<그림 1>* |

> 예를 들어 <그림 2>와 같이 시작점에서부터 첫 번째, 두 번째, 네 번째, 여섯 번째 계단을 밟아 도착점에 도달하면 총 점수는 10 + 20 + 25 + 20 = 75점이 된다.

| ![그림 2.jpg](https://upload.acmicpc.net/f00b6121-1c25-492e-9bc0-d96377c586b0/-/preview/) | 
|:--:| 
| *<그림 2>* |

> 계단 오르는 데는 다음과 같은 규칙이 있다.
> 1. 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
> 2. 연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
> 3. 마지막 도착 계단은 반드시 밟아야 한다.

> 따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다. 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세 번째 계단을 연속해서 모두 밟을 수는 없다.
각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을 구하는 프로그램을 작성하시오.

# 입력
> 입력의 첫째 줄에 계단의 개수가 주어진다.
둘째 줄부터 한 줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여 있는 점수가 주어진다. 계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.

# 출력
> 첫째 줄에 계단 오르기 게임에서 얻을 수 있는 총 점수의 최댓값을 출력한다.

# 2차원 배열 이용한 풀이
[이 강의](https://blog.encrypted.gg/974?category=773649)를 보면서 2차원 배열에 대한 풀이법을 알 수 있었다. 코드와 풀이법은 다음과 같다.

```c++
#include <iostream>
#include <algorithm>

using namespace std;

const int MAX = 301;

// tab[i][j], i는 현재 계단, j는 이 계단을 연속으로 밟기전까지 연속으로 밟은 계단의 수
int tab[MAX][3] = {};
int score[MAX] = {};

int N;

int main()
{
	cin >> N;

    // 점수를 기록
	for (int i = 1; i <= N; i++)
	{
		cin >> score[i];
	}

    // 초기값을 정한다.
    
    // tab[1][1] : 첫번째 계단을 처음으로 밟았을 경우 점수는 score[1]의 값
	tab[1][1] = score[1];
    // tab[1][2] : 첫번째 계단을 두번째로 밟았을 경우는 존재하지 않는다. 따라서 0
	tab[1][2] = 0;
    // tab[2][1] : 두번째 계단을 처음 밟았을 경우 즉, 첫번째 계단은 건너뛴 경우
	tab[2][1] = score[2];
    // tab[2][2] : 두번째 계단을 연속으로 밟았을 경우 즉, 첫번째와 두번째를 연달아 밟았을 경우가 된다.
	tab[2][2] = score[1] + score[2];

    // 만약 N == 1이라면 바로 값을 출력
	if (N == 1)
		cout << score[1] << "\n";
	else
	{
        // 2번째 계단까지의 초기값을 이용하여 N까지 최댓값을 구한다.
		for (int i = 3; i <= N; i++)
		{
            // tab[i][1]의 경우 이 계단을 처음 밟았을 경우
            // 따라서 2칸전 계단의 점수중에 한번 밟았을 경우와 2번 연속으로 밟았을 경우에서
            // 최댓값을 구해서 현재 계단의 점수에 더한다.
			tab[i][1] = max(tab[i - 2][1], tab[i - 2][2]) + score[i];
            
            // tab[i][2]의 경우 연속으로 계단을 밟았을 경우다 따라서 그 전 계단은 무조건 밟았다는 예기가 된다. 따라서 i - 1번째 계단을 처음 밟았을 경우의 점수와 더한다.
			tab[i][2] = tab[i - 1][1] + score[i];
		}

        // 최댓값을 출력한다.
		cout << max(tab[N][1], tab[N][2]) << "\n";
	}

	return 0;
}
```

# 1차원 배열을 이용한 풀이

```c++
#include <iostream>
#include <algorithm>

using namespace std;

const int SIZE = 301;

int score[SIZE];
int tab[SIZE];

int main()
{
	int N;

	cin >> N;

	for (int i = 0; i < N; i++)
		cin >> score[i];

    // 초기값 정의
	tab[0] = score[0];
    // 두번째 계단을 밟았을 경우 최대로 되는 점수를 구한다.
	tab[1] = max(score[0] + score[1], score[1]);
    // 세번째 계단을 밟았을 경우는 첫번째 계단을 밟고 건너뛰고 밟거나
    // 첫번째를 건너뛰고 두번째 세번째를 연속으로 밟는 경우이다.
	tab[2] = max(score[0] + score[2], score[1] + score[2]);

    // 4번째 계단부터 시작한다.
	for (int i = 3; i < N; i++)
    {
        // 현재 계단의 최댓값
        // max(전 계단을 건너뛰었을 경우 2단계 전 값과 현재 점수의 합, 전 계단을 밟았을 경우 3단계 전 계단의 값과 전 계단과 현재 계단의 합)
		tab[i] = max(tab[i - 2] + score[i], tab[i - 3] + score[i] + score[i - 1]);
    }

	cout << tab[N - 1] << "\n";



	return 0;
}
```