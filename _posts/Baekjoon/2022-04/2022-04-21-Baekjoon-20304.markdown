---
layout: post
title: 비밀번호 제작
date: 2022-04-21 11:36:07 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/20304)
# 비밀번호 제작

# 문제
> 서강대학교 전산실에서 보안직원으로 일하는 향빈이는 한 통의 이메일을 받게 되었다. 이메일에는 서버 관리자 계정에 대한 비정상적인 로그인 시도가 감지되었다는 내용이 적혀 있었고, 첨부된 파일에는 지금까지 로그인 시도에 사용된 비밀번호 목록이 있었다. 참고로, 서버 관리자 계정의 비밀번호로는 $0$ 이상 $N$ 이하의 정수 중 하나를 사용할 수 있다.
두 비밀번호의 안전 거리는 이진법으로 표현한 두 비밀번호의 서로 다른 자리의 개수로 정의한다. 예를 들어 $3$을 이진법으로 표현하면 $0011$, $8$을 이진법으로 표현하면 $1000$이 되고, 이때 서로 다른 자리의 개수는 $3$개이므로 $3$과 $8$의 안전 거리는 $3$이 된다.
어떤 비밀번호의 안전도는 지금까지 로그인 시도에 사용된 모든 비밀번호와의 안전 거리 중 최솟값으로 정의한다. 예를 들어 지금까지 로그인 시도에 사용된 비밀번호가 $3$과 $4$이라고 가정하면, 새로운 비밀번호 $8$에 대해 $3$과 $8$의 안전 거리는 $3$, $4$와 $8$의 안전 거리는 $2$이므로 비밀번호 $8$의 안전도는 $2$가 된다.
향빈이는 해커가 비밀번호를 알아내기까지의 시간을 최대한 늦추기 위해 현재 사용 중인 관리자 계정 비밀번호의 안전도가 가장 높게끔 바꾸고 싶다. 이때, 안전도가 제일 높은 비밀번호의 안전도를 구하여라.

# 입력
> 첫째 줄에 관리자 계정 비밀번호의 최댓값을 나타내는 정수 $N$이 주어진다. ($0 \leq N \leq 1\ 000\ 000$)
둘째 줄에는 로그인 시도에 사용된 비밀번호의 개수를 나타내는 정수 $M$이 주어진다. ($1 \leq M \leq 100\ 000$)
셋째 줄에는 로그인 시도에 사용된 비밀번호 값인 정수 $p_1, p_2, \cdots, p_M$이 주어진다. ($0 \leq p_i \leq N$)

# 출력
> 안전도가 제일 높은 비밀번호의 안전도를 출력한다.

# 풀이
XOR로 푸는 법을 생각했으나 비밀번호의 최댓값 범위와 시도한 비밀번호 개수를 전부다 비교하면 시간초과가 무조건 뜰 것 같았다. 마땅히 방법이 떠오르질 않아서 인터넷을 참조하였고 BFS를 이용한 풀이를 [이 곳](https://geniusjo-story.tistory.com/503)에서 발견하였고 이 풀이 방법을 이용했다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int N, M;

int ans = -1;

int main()
{
	cin >> N >> M;

	vector<int> v;

	v.resize(M);

	for (int i = 0; i < M; i++)
	{
		cin >> v[i];
	}

	int bit = N;
	int maxBit = 0;

    // 현재입력된 범위 N을 이진수로 나타냈을때 최대 비트 수를 구한다.
	while (1)
	{
		if (bit / 2 != 0)
		{
			maxBit++;
			bit /= 2;
		}
		else
		{
			maxBit++;
			break;
		}
	}


	size_t size = v.size();
    
	queue<int> q;
	vector<int> discovered(1000001, 0);
	vector<int> depth(1000001, 0);

    // 먼저 초기화한다.
    // 큐에는 시도한 비밀번호가 들어가고
    // 발견횟수는 1, 그리고 깊이는 0으로 초기화한다.
	for (int i = 0; i < size; i++)
	{
		q.push(v[i]);
		discovered[v[i]] = 1;
		depth[v[i]] = 0;
	}

	while (!q.empty())
	{
        // 현재 위치
		int here = q.front();
		q.pop();

        // 최대 비트수만큼 반복한다.
		for (int i = 0; i < maxBit; i++)
		{
            // 안전거리를 구한다.
			int there = (here ^ (1 << i));

            // 만약 최댓값을 넘지 않고 한번도 사용되지 않았다면
			if (there <= N && discovered[there] == 0)
			{   
                // 사용횟수를 1로 만들고
				discovered[there] = 1;
                // 깊이를 누적한다.
				depth[there] = depth[here] + 1;
				q.push(there);
			}
		}
	}

	for (int i = 0; i <= N; i++)
	{
		ans = max(ans, depth[i]);
	}

	cout << ans << "\n";

	return 0;
}
```