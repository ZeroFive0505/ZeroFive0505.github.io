---
layout: post
title: 숨바꼭질 5
date: 2021-07-23 11:28:33 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/17071)
# 숨바꼭질

# 문제
> 수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 500,000)에 있고, 동생은 점 K(0 ≤ K ≤ 500,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다. 동생은 항상 걷기만 한다. 동생은 항상 매 초마다 이동을 하며, 이동은 가속이 붙는다. 동생이 이동하는 거리는 이전에 이동한 거리보다 1을 더한 만큼 이동한다. 즉, 동생의 처음 위치는 K, 1초가 지난 후 위치는 K+1, 2초가 지난 후 위치는 K+1+2, 3초가 지난 후의 위치는 K+1+2+3이다. 수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오. 동생을 찾는 위치는 정수 좌표이어야 하고, 수빈이가 0보다 작은 좌표로, 50만보다 큰 좌표로 이동하는 것은 불가능하다.

# 입력
> 첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.

# 출력
> 수빈이가 동생을 찾는 가장 빠른 시간을 출력한다. 수빈이가 동생을 찾을 수 없거나, 찾는 위치가 500,000을 넘는 경우에는 -1을 출력한다.

# 코드
```c++
#include <iostream>
#include <cstring>
#include <queue>
#include <vector>

using namespace std;

const int SIZE = 500000;

int N, K;

int VISITED[SIZE + 1][2];

int GetSum(int n)
{
	return n * (n + 1) / 2;
}


int BFS()
{
	memset(VISITED, -1, sizeof(VISITED));

	queue<pair<int, int>> q;

	q.push({ N, 0 });

	while (!q.empty())
	{
		int current = q.front().first;
		int elapsedTime = q.front().second;
		q.pop();

		if (current < 0 || current > SIZE)
			continue;

		if (VISITED[current][elapsedTime % 2] != -1)
			continue;

		VISITED[current][elapsedTime % 2] = elapsedTime;
		q.push({ current * 2, elapsedTime + 1 });
		q.push({ current - 1, elapsedTime + 1 });
		q.push({ current + 1, elapsedTime + 1 });
	}

	for (int i = 0; i < SIZE; i++)
	{
		int dist = K + GetSum(i);

		if (dist > SIZE)
			return -1;

		if (VISITED[dist][i % 2] != -1 && VISITED[dist][i % 2] <= i)
			return i;
	}

	return -1;
}

int main()
{
	cin >> N >> K;

	cout << BFS() << "\n";

	return 0;
}
```

# 풀이
평범하게 BFS로 풀어보려 했지만 잘 풀리지는 않았다. 인터넷을 참조해본 결과 홀수 짝수일때를 나눠서 생각을 해야하는 문제였다. 수빈이가 짝수 초에 방문한곳은 짝수 초에 또 방문을 할 수도 있고 이는 홀수 초일때도 마찬가지이다. 이런식으로 모든 이동 경우의 수를 기록하고 동생이 움직이면서 동생도 마찬가지로 홀수, 짝수초로 따로 체크를 한다.