---
layout: post
title: 확장 게임
date: 2021-07-27 08:14:28 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/16920)
# 확장 게임

# 문제
> 구사과와 친구들이 확장 게임을 하려고 한다. 이 게임은 크기가 N×M인 격자판 위에서 진행되며, 각 칸은 비어있거나 막혀있다. 각 플레이어는 하나 이상의 성을 가지고 있고, 이 성도 격자판 위에 있다. 한 칸 위에 성이 두 개 이상인 경우는 없다. 게임은 라운드로 이루어져 있고, 각 라운드마다 플레이어는 자기 턴이 돌아올 때마다 성을 확장해야 한다. 제일 먼저 플레이어 1이 확장을 하고, 그 다음 플레이어 2가 확장을 하고, 이런 식으로 라운드가 진행된다. 각 턴이 돌아왔을 때, 플레이어는 자신이 가지고 있는 성을 비어있는 칸으로 확장한다. 플레이어 i는 자신의 성이 있는 곳에서 Si칸 만큼 이동할 수 있는 모든 칸에 성을 동시에 만든다. 위, 왼쪽, 오른쪽, 아래로 인접한 칸으로만 이동할 수 있으며, 벽이나 다른 플레이어의 성이 있는 곳으로는 이동할 수 없다. 성을 다 건설한 이후엔 다음 플레이어가 턴을 갖는다. 모든 플레이어가 더 이상 확장을 할 수 없을 때 게임이 끝난다. 게임판의 초기 상태가 주어졌을 때, 최종 상태를 구해보자.

# 입력
> 첫째 줄에 격자판의 크기 N, M과 플레이어의 수 P가 주어진다. 둘째 줄에는 S1, S2, ...SP가 주어진다. 다음 N개의 줄에는 게임판의 상태가 주어진다. '.'는 빈 칸, '#'는 벽, '1', '2', ..., '9'는 각 플레이어의 성이다. 모든 플레이어는 적어도 하나의 성을 가지고 있으며, 게임에 참가하지 않는 플레이어의 성이 있는 경우는 없다.

# 출력
> 플레이어 1이 가진 성의 수, 2가 가진 성의 수, ..., P가 가진 성의 수를 공백으로 구분해 출력한다.

# 첫 시도
```c++
#include <iostream>
#include <ctype.h>
#include <string>
#include <vector>
#include <queue>

using namespace std;

int N, M;

int P;

struct sPos
{
	int x;
	int y;
	char id;

	sPos(int x, int y, char id) : x(x), y(y), id(id) {}
};

struct sDelta
{
	int x;
	int y;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};


void BFS(queue<sPos>& q, const vector<int>& moves, vector<vector<char>>& v, vector<int>& cnts, queue<sPos>& bufferQ, int id)
{
	while (!q.empty())
	{
		sPos current = q.front();
		q.pop();
		int cx = current.x;
		int cy = current.y;

		for (int j = 0; j < 4; j++)
		{
			int nx = cx + Delta[j].x;
			int ny = cy + Delta[j].y;

			if (nx < 1 || ny < 1 || nx > M || ny > N)
				continue;

			if (v[ny][nx] == '.')
			{
				v[ny][nx] = current.id;
				cnts[id]++;
				bufferQ.push(sPos(nx, ny, current.id));
			}
		}

	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cin >> N >> M;

	cin >> P;

	vector<int> moves(P + 1, 0);
	vector<vector<char>> v(N + 1, vector<char>(M + 1, '.'));

	for (int i = 1; i <= P; i++)
	{
		cin >> moves[i];
	}

	vector<queue<sPos>> vq(P + 1);
	vector<int> cnts(P + 1, 0);

	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= M; j++)
		{
			char ch;
			cin >> ch;

			if (isdigit(ch))
			{
				vq[ch - '0'].push(sPos(j, i, ch));
				cnts[ch - '0']++;
			}

			v[i][j] = ch;
		}
	}

	while (true)
	{
		bool finish = true;
		for (int i = 1; i <= P; i++)
		{
			if (!vq[i].empty())
				finish = false;

			queue<sPos> bufferQ;

			for (int j = 0; j < moves[i]; j++)
			{
				BFS(vq[i], moves, v, cnts, bufferQ, i);
				while (!bufferQ.empty())
				{
					vq[i].push(bufferQ.front());
					bufferQ.pop();
				}
			}
		}

		if (finish)
			break;
	}

	for (int i = 1; i <= P; i++)
		cout << cnts[i] << " ";

	cout << "\n";

	return 0;
}
```

# 첫 시도 결과
결과는 시간 초과였다. 원인을 쉽게 찾지 못해서 결국에는 인터넷에 풀이를 검색해서 해결을 했다.

# 코드
```c++
#include <iostream>
#include <ctype.h>
#include <cstring>
#include <string>
#include <vector>
#include <queue>

using namespace std;

int N, M;

int P;

const int SIZE = 10;

bool Flag[SIZE];

struct sPos
{
	int x;
	int y;
	char id;
	int moveCnt;

	sPos(int x, int y, char id, int moveCnt) : x(x), y(y), id(id), moveCnt(moveCnt) {}
};

struct sDelta
{
	int x;
	int y;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};


bool BFS(vector<queue<sPos>>& vq, const vector<int>& moves, vector<vector<char>>& v, vector<int>& cnts, int id)
{
	bool flag = false;
	queue<sPos> q = vq[id];

	while (!q.empty())
	{
		sPos current = q.front();
		q.pop();
		int cx = current.x;
		int cy = current.y;
		int moveCnt = current.moveCnt;

		if (moveCnt == moves[id])
			vq[id].pop();

		for (int i = 0; i < 4; i++)
		{
			int nx = cx + Delta[i].x;
			int ny = cy + Delta[i].y;
			int remainCnt = moveCnt;

			if (remainCnt == 0)
				break;

			if (nx < 1 || ny < 1 || nx > M || ny > N)
				continue;

			if (v[ny][nx] == '.')
			{
				v[ny][nx] = current.id;
				cnts[id]++;
				vq[id].push(sPos(nx, ny, current.id, moves[id]));
				q.push(sPos(nx, ny, current.id, remainCnt - 1));
				flag = true;
			}
		}
	}

	return flag;
}

bool Check()
{
	for (int i = 1; i <= P; i++)
	{
		if (Flag[i])
			return true;
	}

	return false;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cin >> N >> M;

	cin >> P;

	vector<int> moves(P + 1, 0);
	vector<vector<char>> v(N + 1, vector<char>(M + 1, '.'));

	for (int i = 1; i <= P; i++)
	{
		cin >> moves[i];
	}

	vector<queue<sPos>> vq(P + 1);
	vector<int> cnts(P + 1, 0);

	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= M; j++)
		{
			char ch;
			cin >> ch;

			if (isdigit(ch))
			{
				vq[ch - '0'].push(sPos(j, i, ch, moves[ch - '0']));
				cnts[ch - '0']++;
			}

			v[i][j] = ch;
		}
	}

	memset(Flag, true, sizeof(Flag));

	while (true)
	{
		for (int i = 1; i <= P; i++)
		{
			if (!Flag[i])
				continue;
			bool temp = BFS(vq, moves, v, cnts, i);

			if (!temp)
				Flag[i] = false;
		}

		if (!Check())
			break;
	}

	for (int i = 1; i <= P; i++)
		cout << cnts[i] << " ";

	cout << "\n";

	return 0;
}
```

# 풀이
무한 반복문을 빠져나가는 원리는 비슷했다. 하지만 BFS 부분이 달랐는데 큐에 넣을때 이동가능한 횟수도 같이 넣어서 첫 시도 코드와 비슷하게 새롭게 갈 수 있는 영역들을 담을 큐와 현재 확장이 가능한 큐에서 확장을 해가면서 카운드가 0이 되면 빠져나오고 만약 한번이라도 확장을 못했다면 끝이 난거니 체크해서 건너뛰게 만든다.