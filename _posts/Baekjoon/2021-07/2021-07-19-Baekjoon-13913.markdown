---
layout: post
title: 숨바꼭질 4
date: 2021-07-19 09:50:49 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/13913)
# 숨바꼭질 4

# 문제
> 수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다. 수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

# 입력
> 첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.

# 출력
> 첫째 줄에 수빈이가 동생을 찾는 가장 빠른 시간을 출력한다. 둘째 줄에 어떻게 이동해야 하는지 공백으로 구분해 출력한다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int INF = 987654321;

const int SIZE = 100001;

const int MOVESET[3] = { -1, 1, 2 };

int DISTS[SIZE];

int N, K;

struct sPos
{
	int x;
	int elapsedTime;
};

void PrintRoute(int src, int dest)
{
	if (dest == src)
		return;

	PrintRoute(src, DISTS[dest]);

	cout << dest << " ";

}

int main()
{
	for (int i = 0; i < SIZE; i++)
		DISTS[i] = -1;

	cin >> N >> K;

	DISTS[N] = -1;


	queue<sPos> q;

	q.push({ N, 0 });

	while (!q.empty())
	{
		sPos current = q.front();
		q.pop();

		if (current.x == K)
		{
			cout << current.elapsedTime << "\n";
			cout << N << " ";
			PrintRoute(N, K);
			cout << "\n";
			break;
		}

		int cx = current.x;

		for (int i = 0; i < 3; i++)
		{
			int nx;
			if (MOVESET[i] == 2)
				nx = cx * MOVESET[i];
			else
				nx = cx + MOVESET[i];

			if (nx < 0 || nx >= SIZE)
				continue;

			if (DISTS[nx] == -1)
			{
				DISTS[nx] = cx;
				q.push({ nx, current.elapsedTime + 1 });
			}
		}
	}

	return 0;
}
```

# 풀이
백준에 있는 숨바꼭질 문제들 유형과 동일했다. 찾으면 그 최소 횟수를 반환하는 대신에 이번에는 최소 횟수와 경로까지 반환하는 문제였다. 따라서 재귀를 통해서 경로를 역추적하게 했다. 처음에는 모든 정점이 -1이며 즉, 자기 자신을 가리키게 설정한다. 그 이후 새로운 경로를 발견할때 마다 부모노드를 갱신하고 마지막에 출력하면 된다.