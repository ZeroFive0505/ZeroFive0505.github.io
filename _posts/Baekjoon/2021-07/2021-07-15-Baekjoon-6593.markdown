---
layout: post
title: 상범 빌딩
date: 2021-07-15 11:15:10 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/6593)
# 상범 빌딩

# 문제
> 당신은 상범 빌딩에 갇히고 말았다. 여기서 탈출하는 가장 빠른 길은 무엇일까? 상범 빌딩은 각 변의 길이가 1인 정육면체(단위 정육면체)로 이루어져있다. 각 정육면체는 금으로 이루어져 있어 지나갈 수 없거나, 비어있어서 지나갈 수 있게 되어있다. 당신은 각 칸에서 인접한 6개의 칸(동,서,남,북,상,하)으로 1분의 시간을 들여 이동할 수 있다. 즉, 대각선으로 이동하는 것은 불가능하다. 그리고 상범 빌딩의 바깥면도 모두 금으로 막혀있어 출구를 통해서만 탈출할 수 있다. 당신은 상범 빌딩을 탈출할 수 있을까? 만약 그렇다면 얼마나 걸릴까?

# 입력
> 입력은 여러 개의 테스트 케이스로 이루어지며, 각 테스트 케이스는 세 개의 정수 L, R, C로 시작한다. L(1 ≤ L ≤ 30)은 상범 빌딩의 층 수이다. R(1 ≤ R ≤ 30)과 C(1 ≤ C ≤ 30)는 상범 빌딩의 한 층의 행과 열의 개수를 나타낸다. 그 다음 각 줄이 C개의 문자로 이루어진 R개의 행이 L번 주어진다. 각 문자는 상범 빌딩의 한 칸을 나타낸다. 금으로 막혀있어 지나갈 수 없는 칸은 '#'으로 표현되고, 비어있는 칸은 '.'으로 표현된다. 당신의 시작 지점은 'S'로 표현되고, 탈출할 수 있는 출구는 'E'로 표현된다. 각 층 사이에는 빈 줄이 있으며, 입력의 끝은 L, R, C가 모두 0으로 표현된다. 시작 지점과 출구는 항상 하나만 있다.

# 출력
> 각 빌딩에 대해 한 줄씩 답을 출력한다. 만약 당신이 탈출할 수 있다면 다음과 같이 출력한다.
>> Escaped in x minute(s).

> 여기서 x는 상범 빌딩을 탈출하는 데에 필요한 최단 시간이다. 만일 탈출이 불가능하다면, 다음과 같이 출력한다.
>> Trapped!

# 코드
```c++
#include <iostream>
#include <queue>
#include <string>

using namespace std;

int L, R, C;

const int SIZE = 31;

const int INF = 987654321;

int dists[SIZE][SIZE][SIZE];
char building[SIZE][SIZE][SIZE];

struct sPos
{
	int x;
	int y;
	int z;
	
	sPos(int x = 0, int y = 0, int z = 0) : x(x), y(y), z(z) {}

}Delta[] = {
	{-1, 0, 0},
	{1, 0, 0},
	{0, -1, 0},
	{0, 1, 0},
	{0, 0, -1},
	{0, 0, 1}
};

int BFS(const sPos& start)
{
	dists[start.z][start.y][start.x] = 0;

	queue<pair<sPos, int>> q;

	q.push({ sPos(start), 0 });

	while (!q.empty())
	{
		pair<sPos, int> cur = q.front();
		sPos pos = cur.first;
		int dist = cur.second;
		q.pop();

		if (building[pos.z][pos.y][pos.x] == 'E')
			return dist;

		for (int i = 0; i < 6; i++)
		{
			int nx = pos.x + Delta[i].x;
			int ny = pos.y + Delta[i].y;
			int nz = pos.z + Delta[i].z;

			if (nx < 0 || ny < 0 || nz < 0 || nx >= SIZE || ny >= SIZE || nz >= SIZE)
				continue;

			if (building[nz][ny][nx] == '#')
				continue;

			if (dists[nz][ny][nx] > dist + 1)
			{
				dists[nz][ny][nx] = dist + 1;
				q.push({ sPos(nx, ny, nz), dist + 1 });
			}
		}
	}


	return -1;
}

int main()
{
	while (1)
	{
		cin >> L >> R >> C;

		if (L == 0 && R == 0 && C == 0)
			break;

		for (int i = 0; i < SIZE; i++)
		{
			for (int j = 0; j < SIZE; j++)
			{
				for (int k = 0; k < SIZE; k++)
				{
					dists[i][j][k] = INF;
					building[i][j][k] = '#';
				}
			}
		}

		string s;
		sPos current;
		for (int i = 0; i < L; i++)
		{
			for (int j = 0; j < R; j++)
			{
				cin >> s;
				for (int k = 0; k < C; k++)
				{
					if (s[k] == 'S')
					{
						current.z = i;
						current.y = j;
						current.x = k;
					}

					building[i][j][k] = s[k];
				}
			}
		}

		int dist = BFS(current);

		if (dist == -1)
			cout << "Trapped!\n";
		else
			cout << "Escaped in " << dist << " minute(s).\n";

	}

	return 0;
}
```

# 풀이
[토마토](https://www.acmicpc.net/problem/7569)와 유사한 문제였다. 3차원 배열을 이용해 동, 서, 남, 북, 상, 하로 이동할 수 있게하고 최단거리를 기록해가면서 도달했을시에 거리를 반환한다. 모든 거리는 초기에는 큰 값으로 또 건물의 정보를 담는 배열에는 #을 넣어서 초기화한다.