---
layout: post
title: KCM Travel
date: 2021-07-26 11:02:29 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/16920)
# KCM Travel

# 문제
> 각고의 노력 끝에 찬민이는 2014 Google Code Jam World Finals에 진출하게 되었다. 구글에서 온 초대장을 받고 기뻐했던 것도 잠시, 찬찬히 읽어보던 찬민이는 중요한 사실을 알아차렸다. 최근의 대세에 힘입어 구글 역시 대기업답게 비용 감축에 열을 내고 있었던 것이다. 초대장 내용에 의하면 구글은 찬민에게 최대 M원까지의 비용만을 여행비로써 부담해주겠다고 한다. 인천에서 LA행 직항 한 번 끊어주는게 그렇게 힘드냐고 따지고도 싶었지만, 다가올 결승 대회를 생각하면 대회 외적인 곳에 마음을 쓰고 싶지 않은 것 또한 사실이었다. 그래서 찬민은 인천에서 LA까지 M원 이하로 사용하면서 도착할 수 있는 가장 빠른 길을 차선책으로 택하기로 하였다. 각 공항들간 티켓가격과 이동시간이 주어질 때, 찬민이 인천에서 LA로 갈 수 있는 가장 빠른 길을 찾아 찬민의 대회 참가를 도와주자.

# 입력
> 입력 파일의 첫 번째 줄에 테스트 케이스의 수를 의미하는 자연수 T가 주어진다. 그 다음에는 T개의 테스트 케이스가 주어진다. 각 테스트 케이스의 첫 줄에는 공항의 수 N (2 ≤ N ≤ 100), 총 지원비용 M (0 ≤ M ≤ 10,000), 티켓정보의 수 K (0 ≤ K ≤ 10,000)가 공백으로 구분되어 주어진다. 이어서 K개의 줄에 걸쳐 각 티켓의 출발공항 u, 도착공항 v (1 ≤ u, v ≤ N, u ≠ v), 비용 c (1 ≤ c ≤ M, 정수), 그리고 소요시간 d (1 ≤ d ≤ 1,000) 가 공백으로 구분되어 주어진다. 인천은 언제나 1번 도시이고, LA는 언제나 N번 도시이다

# 출력
> 각 테스트 케이스당 한 줄에 찬민이 LA에 도착하는 데 걸리는 가장 짧은 소요시간을 출력한다. 만약, LA에 도착할 수 없는 경우 "Poor KCM"을 출력한다.

# 풀이
혼자 힘으로는 못 풀겠어서 인터넷을 참고하면서 풀었다... 다익스트라에 최단경로에서 최소 비용까지 추가되었으므로 2차원 배열을 이용한다 timeDelay[i][j]는 1번 정점에서 i번 정점까지 가는데 j만큼의 비용이 걸리며 그 배열에 값은 최소 시간이 된다.. 다익스트라 변형 종류가 참 많다는 것을 느낀다. 또한 최소 시간으로 업데이트를 해서 시간과 메모리 효율을 상승시킨다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

const int SIZE = 101;

const int MAX = 10001;

int N, M, K;

const int INF = 987654321;

vector<pair<int, pair<int, int>>> airport[SIZE];

int timeDelay[SIZE][MAX];

void Dijkstra(const int& N, const int& MAXCOST)
{
	for (int i = 0; i <= N; i++)
	{
		for (int j = 0; j <= MAXCOST; j++)
		{
			timeDelay[i][j] = INF;
		}
	}

    // 1번에서 1번까지 가는데는 0의 비용과 0의 시간이 든다.
	timeDelay[1][0] = 0;

	priority_queue<pair<int, pair<int, int>>> pq;

	pq.push({ 0, {0, 1} });

	while (!pq.empty())
	{
		int cost = -pq.top().first;
		int time = pq.top().second.first;
		int here = pq.top().second.second;
		pq.pop();

        // 만약 걸리는 시간이 현재 기록된 시간보다 크다면 건너뛴다.
		if (timeDelay[here][cost] < time)
			continue;

		for (int i = 0; i < airport[here].size(); i++)
		{
			int nextCost = cost + airport[here][i].second.first;
			int there = airport[here][i].first;
			int nextTime = time + airport[here][i].second.second;


            // 총합이 한계치보다 많으면 건너뛴다.
			if (nextCost > MAXCOST)
				continue;

            // 만약 걸리는 시간이 현재 기록된 시간보다 작다면
			if (timeDelay[there][nextCost] > nextTime)
			{
                // 모든 비용을 순회하면서 there로 가는 최소 시간을 업데이트 해준다.
				for (int i = nextCost; i <= MAXCOST; i++)
				{
					if (timeDelay[there][i] > nextTime)
						timeDelay[there][i] = nextTime;
				}
                
				pq.push({ -nextCost, {nextTime, there} });
			}
		}
	}

	int ret = INF;

	for (int i = 1; i <= MAXCOST; i++)
		ret = min(ret, timeDelay[N][i]);

	if (ret == INF)
		cout << "Poor KCM\n";
	else
		cout << ret << "\n";
}

int main()
{
	int T;

	cin >> T;

	while (T--)
	{
		cin >> N >> M >> K;

		for (int i = 1; i <= N; i++)
		{
			while (!airport[i].empty())
				airport[i].pop_back();
		}

		for (int i = 0; i < K; i++)
		{
			int u, v, c, d;

			cin >> u >> v >> c >> d;

			airport[u].push_back({ v, {c,d} });
		}

		Dijkstra(N, M);
	}

	return 0;
}
```