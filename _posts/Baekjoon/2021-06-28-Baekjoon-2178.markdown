---
layout: post
title: 미로탐색 백준
date: 2021-06-28 08:34:15 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/2178)
# 미로 탐색

# 문제
> N×M크기의 배열로 표현되는 미로가 있다.
미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.

# 입력
> 첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.

# 출력
> 첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <queue>
#include <string>

using namespace std;

struct sPos
{
	int x;
	int y;
	int dist;

	sPos(int x, int y, int dist)
	{
		this->x = x;
		this->y = y;
		this->dist = dist;
	}
};

struct sDelta
{
	int x;
	int y;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

const int INF = 987654321;

int BFS(const vector<vector<int>>& v, vector<vector<bool>>& visited, int startY, int startX, int endY, int endX)
{
	sPos current = sPos(startX, startY, 1);

	queue<sPos> q;

	q.push(current);

	visited[startY][startX] = true;

	while (!q.empty())
	{
		sPos cur = q.front();
		q.pop();

		int x = cur.x;
		int y = cur.y;

		if (x == endX && y == endY) // 도착했다면 거리를 반환.
			return cur.dist;

		for (int i = 0; i < 4; i++)
		{
			int ny = y + Delta[i].y;
			int nx = x + Delta[i].x;

			if (ny < 0 || nx < 0 || ny >= v.size() || nx >= v[0].size())
				continue;

			if (v[ny][nx] != 0 && !visited[ny][nx])
			{
				visited[ny][nx] = true;
				q.push(sPos(nx, ny, cur.dist + 1));
			}
		}
	}

	return INF;
}

int main()
{
	int N, M;
	cin >> N >> M;

	vector<vector<int>> v(N, vector<int>(M, 0));
	vector<vector<bool>> visited(N, vector<bool>(M, false));
	string s;
	for (int i = 0; i < N; i++)
	{
		cin >> s; // 입력에는 공백이 없으므로 문자열로 입력받는다.
		for (int j = 0; j < M; j++)
		{
			v[i][j] = s[j] - '0';
		}
	}

	int ret = BFS(v, visited, 0, 0, N - 1, M - 1);

	cout << ret << "\n";

	return 0;
}
```

# 풀이
BFS는 DFS와 달리 최단 거리를 찾자마자 종료 할 수 있다. 따라서 이 문제에도 BFS를 적용해서 최단 거리를 찾을 수 있었다. 