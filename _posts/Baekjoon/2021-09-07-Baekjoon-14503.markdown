---
layout: post
title: 로봇 청소기
date: 2021-09-08 09:16:57 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/14503)
# 로봇 청소기

# 문제 
> 로봇 청소기가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.  
로봇 청소기가 있는 장소는 N×M 크기의 직사각형으로 나타낼 수 있으며, 1×1크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 지도의 각 칸은 (r, c)로 나타낼 수 있고, r은 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로 부터 떨어진 칸의 개수이다.  
로봇 청소기는 다음과 같이 작동한다.  
> 1. 현재 위치를 청소한다.
> 2. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향부터 차례대로 인접한 칸을 탐색한다. 
>> - 왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면, 그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.  
>> - 왼쪽 방향에 청소할 공간이 없다면, 그 방향으로 회전하고 2번으로 돌아간다.
>> - 네 방향 모두 청소가 이미 되어있거나 벽인 경우에는, 바라보는 방향을 유지한 채로 한 칸 후진을 하고 2번으로 돌아간다.
>> - 네 방향 모두 청소가 이미 되어있거나 벽이면서, 뒤쪽 방향이 벽이라 후진도 할 수 없는 경우에는 작동을 멈춘다.

> 로봇 청소기는 이미 청소되어있는 칸을 또 청소하지 않으며, 벽을 통과할 수 없다.

# 입력
> 첫째 줄에 세로 크기 N과 가로 크기 M이 주어진다.  
(3 ≤ N, M ≤ 50) 둘째 줄에 로봇 청소기가 있는 칸의 좌표 (r, c)와 바라보는 방향 d가 주어진다. d가 0인 경우에는 북쪽을, 1인 경우에는 동쪽을, 2인 경우에는 남쪽을, 3인 경우에는 서쪽을 바라보고 있는 것이다.  
셋째 줄부터 N개의 줄에 장소의 상태가 북쪽부터 남쪽 순서대로, 각 줄은 서쪽부터 동쪽 순서대로 주어진다. 빈 칸은 0, 벽은 1로 주어진다. 지도의 첫 행, 마지막 행, 첫 열, 마지막 열에 있는 모든 칸은 벽이다.  
로봇 청소기가 있는 칸의 상태는 항상 빈 칸이다.

# 출력
> 로봇 청소기가 청소하는 칸의 개수를 출력한다.

# 풀이
로봇 청소기의 회전을 어떻게 표현해야 할지 한참을 고민해도 마땅히 좋은 방법이 안 떠올라서 인터넷의 다른 분들의 풀이를 참조하여 풀 수 있었다. 0, 1, 2, 3 차례대로 북, 동, 남, 서 라고 할때 0이 북쪽을 가리킬때는 차례대로 왼쪽으로 회전을 시킬때 3, 2, 1, 0 순으로 나타낼 수 있으며 1이 북쪽을 가리킬때는 0, 3, 2, 1순으로 회전을 시킬 수 있다. 이러한 회전은 총 4번 반복문을 통해서 식으로 나타낼 수 있는데 `(현재 회전 + (3 - i)) % 4`로 나타낼 수 있다. 현 위치에서 항상 왼쪽으로 돌면서 만약 청소가 되지 않은 공간이 있다면 그 쪽으로 전진하고 바로 반복문을 빠져나온다.

# 코드
```c++
#include <iostream>
#include <queue>

using namespace std;

struct sRobot
{
	int x;
	int y;
	int d;
};

struct sDelta
{
	int x;
	int y;
}Delta[] = {
	{0, -1},
	{1, 0},
	{0, 1},
	{-1, 0}
};

int N, M;

const int SIZE = 51;

int arr[SIZE][SIZE];

int main()
{
	cin >> N >> M;

	sRobot robot;
	
	cin >> robot.y >> robot.x >> robot.d;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> arr[i][j];
		}
	}

	queue<sRobot> q;

	q.push(robot);

	int cnt = 0;

	while (!q.empty())
	{
		sRobot current = q.front();
		q.pop();

        // 만약 현재 빈칸이라면
		if (arr[current.y][current.x] == 0)
		{
            // 청소를 하고 카운트를 늘린다.
			arr[current.y][current.x] = 2;
			cnt++;
		}

		bool flag = true;

		for (int i = 0; i < 4; i++)
		{   
            // 현재 방향에서 순서대로 왼쪽 방향의 값을 구한다.
			int nextDir = (current.d + (3 - i)) % 4;

            // 1칸 전진을 한다.
			int nx = current.x + Delta[nextDir].x;
			int ny = current.y + Delta[nextDir].y;

			if (nx < 0 || ny < 0 || nx >= M || ny >= N)
				continue;

            // 만약 벽도 아니고 청소도 안된 곳이라면 추가
			if (arr[ny][nx] != 1 && arr[ny][nx] != 2)
			{
				q.push({ nx, ny, nextDir });
				flag = false;
				break;
			}
		}

        // 만약 아무곳도 새롭게 청소하지 못했다면
		if (flag)
		{
            // 현재 방향에서 빼준다. (뒤로 간다.)
			int nx = current.x - Delta[current.d].x;
			int ny = current.y - Delta[current.d].y;

			if (nx < 0 || ny < 0 || nx >= M || ny >= N)
				break;

            // 만약 벽이아니라면 새롭게 추가
			if (arr[ny][nx] != 1)
				q.push({ nx, ny, current.d });
			else
				break;
		}
	}


	cout << cnt << "\n";

	return 0;
}
```