---
layout: post
title: N과 M(1)
date:  2021-08-09 13:12:57 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/15649)
# N과 M(1)

# 문제
> 자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.
> - 1부터 N까지 자연수 중에서 중복 없이 M개를 고른 수열

# 입력
> 첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)

# 출력
> 한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.
수열은 사전 순으로 증가하는 순서로 출력해야 한다.

# 풀이
백트랙킹 입문 문제 깊이가 M이라 하면 M까지 들어갔을 경우 현재 배열에 들어있는 값들을 순서대로 출력하고 아니라면 1부터 N까지의 수중에 쓰지 않은 수를 찾아서 배열에 넣는다.

# 코드
```c++
#include <iostream>

using namespace std;

int N, M;

int arr[10];
bool used[10];

void recur(int K)
{
	if (K == M)
	{
		for (int i = 0; i < K; i++)
		{
			cout << arr[i] << " ";
		}
		cout << "\n";
		return;
	}

	for (int i = 1; i <= N; i++)
	{
		if (!used[i])
		{
			arr[K] = i;
			used[i] = true;
			recur(K + 1);
			used[i] = false;
		}
	}
}

int main()
{
	cin >> N >> M;

	recur(0);

	return 0;
}
```

# next_permutaion을 이용한 풀이
next_permutation을 이용해서도 풀 수 있었다. 중복을 어떻게 걸러내야 할 지 잘 감이 안 와서 인터넷을 조사해본 결과 [이 곳](https://eunchanee.tistory.com/111)에서 답을 찾을 수 있었다. 간단하게 M개 만큼 넘어가고 반대로 뒤집으면 현재 순열에서 가장 사전순으로 가장 큰 순열이 된다. 여기서 next_permutation을 호출하게 되면 그 순열은 모두 끝이 났으니 다음 순열로 넘어가게 된다. 이러한 방법으로 중복을 제거 할 수 있었다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main()
{
	int N, M;

	cin >> N >> M;

	vector<int> v;

	for (int i = 1; i <= N; i++)
		v.push_back(i);


	while (true)
	{
		for (int i = 0; i < M; i++)
		{
			cout << v[i] << " ";
		}

		cout << "\n";

        // M만큼 넘어간다. 1 2 3 으로 시작했다면 1 3 2 이런식으로 되어있을 것이다.
		reverse(v.begin() + M, v.end());
        
        // 1 3 2는 1로 시작하는 순열에서 가장 마지막 순열이된다. 따라서 다음 순열은 2로 시작한다.
		if (!next_permutation(v.begin(), v.end()))
			break;
	}

	return 0;
}
```