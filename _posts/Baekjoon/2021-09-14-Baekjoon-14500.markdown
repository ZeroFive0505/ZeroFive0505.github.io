---
layout: post
title: 테트로미노
date: 2021-09-14 10:05:23 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/14500)
# 테트로미노

# 문제
> 폴리오미노란 크기가 1×1인 정사각형을 여러 개 이어서 붙인 도형이며, 다음과 같은 조건을 만족해야 한다.
> - 정사각형은 서로 겹치면 안 된다.
> - 도형은 모두 연결되어 있어야 한다.
> - 정사각형의 변끼리 연결되어 있어야 한다. 즉, 꼭짓점과 꼭짓점만 맞닿아 있으면 안 된다.
> 정사각형 4개를 이어 붙인 폴리오미노는 테트로미노라고 하며, 다음과 같은 5가지가 있다.

![Img](https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14500/1.png)

> 아름이는 크기가 N×M인 종이 위에 테트로미노 하나를 놓으려고 한다. 종이는 1×1 크기의 칸으로 나누어져 있으며, 각각의 칸에는 정수가 하나 쓰여 있다.  
테트로미노 하나를 적절히 놓아서 테트로미노가 놓인 칸에 쓰여 있는 수들의 합을 최대로 하는 프로그램을 작성하시오.  
테트로미노는 반드시 한 정사각형이 정확히 하나의 칸을 포함하도록 놓아야 하며, 회전이나 대칭을 시켜도 된다.

# 입력
> 첫째 줄에 종이의 세로 크기 N과 가로 크기 M이 주어진다. (4 ≤ N, M ≤ 500)  
둘째 줄부터 N개의 줄에 종이에 쓰여 있는 수가 주어진다. i번째 줄의 j번째 수는 위에서부터 i번째 칸, 왼쪽에서부터 j번째 칸에 쓰여 있는 수이다. 입력으로 주어지는 수는 1,000을 넘지 않는 자연수이다.

# 출력
> 첫째 줄에 테트로미노가 놓인 칸에 쓰인 수들의 합의 최댓값을 출력한다.

# 풀이
일단 테트로미노들을 3차원 배열을 이용해서 저장을 해놓는다. 그리고 배열에서 테트로미노를 가져올때는 프로그래머스의 문제 [퍼즐 조각 채우기](https://programmers.co.kr/learn/courses/30/lessons/84021) 풀이에서 힌트를 얻어 항상 좌표의 최솟값을 구해서 최종적으로 배열을 만들때 모든 1이 들어간 곳에서 최솟값을 빼서 퍼즐 조각을 (0, 0) 좌 최상단부터 시작을 하게 만들었다. 그 이후에는 최대 대칭은 2번 그리고 최대 회전은 4번의 반복문을 돌면서 합을 구한다. 배열에 배치할때는 퍼즐의 최대 크기 좌표값을 알아내서 그 범위내에 배치 가능한 곳만 반복하고 최대 합을 구하여 반환한다. 좌우 대칭은 먼저 x좌표를 - 를 곱해뒤집고 최솟값을 구한다음에 그 값을 다시 빼줘서 (0, 0)기준으로 만들어준다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int N, M;

const int MAX = 500;

const int INF = 987654321;

int arr[MAX][MAX];

int blocks[5][4][4] = {
	{
		{1, 1, 1, 1},
		{0, 0, 0, 0},
		{0, 0, 0, 0},
		{0, 0, 0, 0},
	},
	{
		{1, 1, 0, 0},
		{1, 1, 0, 0},
		{0, 0, 0, 0},
		{0, 0, 0, 0},
	},

	{
		{1, 0, 0, 0},
		{1, 0, 0, 0},
		{1, 1, 0, 0},
		{0, 0, 0, 0},
	},

	{
		{1, 0, 0, 0},
		{1, 1, 0, 0},
		{0, 1, 0, 0},
		{0, 0, 0, 0}
	},

	{
		{1, 1, 1, 0},
		{0, 1, 0, 0},
		{0, 0, 0, 0},
		{0, 0, 0, 0}
	}
};

int Place(int y, int x, int r, int c, int block[4][4])
{
	int sum = 0;

    // 블록을 배치하고 합을 구해서 반환한다.
	for (int i = 0; i <= r; i++)
	{
		for (int j = 0; j <= c; j++)
		{
			if (block[i][j] == 1)
			{
				sum += arr[y + i][x + j];
			}
		}
	}

	return sum;
}


void copyBlock(int index, int block[4][4])
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			block[i][j] = blocks[index][i][j];
		}
	}
}

void SetArrangedBlock(int block[4][4])
{
	int minLeft = 4;
	int minTop = 4;

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (block[i][j] == 1)
			{
				minLeft = min(minLeft, j);
				minTop = min(minTop, i);
			}
		}
	}


	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (block[i][j] == 1)
			{
				block[i][j] = 0;
				block[i - minTop][j - minLeft] = 1;
			}
		}
	}
}


int GetSum(int block[4][4])
{
	int maxCol = 0;
	int maxRow = 0;

    // 먼저 최대 행과 최대 열의 수를 구한다.
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (block[i][j] == 1)
			{
				maxRow = max(maxRow, i);
				maxCol = max(maxCol, j);
			}
		}
	}


	int maxSum = -INF;
    // 위해서 구한범위내에서 반복을 하게 만든다.
	for (int i = 0; i < N - maxRow; i++)
	{
		for (int j = 0; j < M - maxCol; j++)
		{
			maxSum = max(maxSum, Place(i, j, maxRow, maxCol, block));
		}
	}

	return maxSum;
}

void Rotate(int block[4][4])
{
	int temp[4][4];

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			temp[i][j] = block[i][j];
		}
	}

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			block[i][j] = temp[4 - j - 1][i];
		}
	}
}


void flip(int block[4][4])
{

	vector<pair<int, int>> temp;
	int minLeft = 4;
    // 좌우 대칭이 됬다는 것은 x좌표가 반대가 됬다는 뜻이다.
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (block[i][j])
			{
				temp.push_back({ i, -j });
				minLeft = min(minLeft, -j);
			}
		}
	}

    // 한 번 정리하고
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			block[i][j] = 0;
		}
	}

    // 다시 (0, 0) 기준으로 설정해준다.
	for (int i = 0; i < temp.size(); i++)
	{
		block[temp[i].first][temp[i].second - minLeft] = 1;
	}
}

int main()
{
	cin >> N >> M;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> arr[i][j];
		}
	}

	int answer = -INF;

    // 총 블록의 수는 5개 따라서 최대 5번 반복
	for (int b = 0; b < 5; b++)
	{
        // 일단 블록을 하나 복사해온다.
		int block[4][4];
		copyBlock(b, block);

        // 좌우 대칭은 한번
		for (int f = 0; f < 2; f++)
		{
            // 회전은 4번
			for (int t = 0; t < 4; t++)
			{

                // 최솟값 기준으로 블록을 정리해온다. 따라서 왼쪽 최상단이 (0, 0)부터 시작하게
                // 만든다.
				SetArrangedBlock(block);

				int sum = GetSum(block);

				answer = max(answer, sum);

				Rotate(block);
			}

			flip(block);
		}
	}

	cout << answer << "\n";

	return 0;
}
```