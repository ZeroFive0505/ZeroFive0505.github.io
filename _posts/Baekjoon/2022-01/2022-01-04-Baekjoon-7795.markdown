---
layout: post
title: 먹을 것인가 먹힐 것인가
date: 2022-01-04 10:04:15 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/7795)
# 먹을 것인가 먹힐 것인가

# 문제
> 심해에는 두 종류의 생명체 A와 B가 존재한다. A는 B를 먹는다. A는 자기보다 크기가 작은 먹이만 먹을 수 있다. 예를 들어, A의 크기가 {8, 1, 7, 3, 1}이고, B의 크기가 {3, 6, 1}인 경우에 A가 B를 먹을 수 있는 쌍의 개수는 7가지가 있다. 8-3, 8-6, 8-1, 7-3, 7-6, 7-1, 3-1.
![img](https://www.acmicpc.net/upload/images/ee(1).png)

> 두 생명체 A와 B의 크기가 주어졌을 때, A의 크기가 B보다 큰 쌍이 몇 개나 있는지 구하는 프로그램을 작성하시오.

# 입력
> 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스의 첫째 줄에는 A의 수 N과 B의 수 M이 주어진다. 둘째 줄에는 A의 크기가 모두 주어지며, 셋째 줄에는 B의 크기가 모두 주어진다. 크기는 양의 정수이다. (1 ≤ N, M ≤ 20,000) 

# 출력
> 각 테스트 케이스마다, A가 B보다 큰 쌍의 개수를 출력한다.

# 풀이
B그룹을 오름차순으로 정렬한뒤에 `lower_bound`를 통해서 A그룹의 현재 원소보다 작은 원소의 갯수를 센다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int T;
int N, M;


int main()
{
	cin >> T;

	while (T--)
	{
		cin >> N >> M;

		vector<int> A;
		vector<int> B;

		for (int i = 0; i < N; i++)
		{
			int a;

			cin >> a;

			A.push_back(a);
		}

		for (int i = 0; i < M; i++)
		{
			int b;

			cin >> b;

			B.push_back(b);
		}

		sort(B.begin(), B.end());

		int cnt = 0;

		for (int i = 0; i < A.size(); i++)
		{
			cnt += lower_bound(B.begin(), B.end(), A[i]) - B.begin();
		}

		cout << cnt << "\n";

	}

	return 0;
}
```