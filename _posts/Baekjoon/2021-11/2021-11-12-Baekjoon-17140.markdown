---
layout: post
title: 이차원 배열과 연산
date: 2021-11-12 09:58:33 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/17140)
# 이차원 배열과 연산

# 문제
> 크기가 3×3인 배열 A가 있다. 배열의 인덱스는 1부터 시작한다. 1초가 지날때마다 배열에 연산이 적용된다.
> - R 연산: 배열 A의 모든 행에 대해서 정렬을 수행한다. 행의 개수 ≥ 열의 개수인 경우에 적용된다.
> - C 연산: 배열 A의 모든 열에 대해서 정렬을 수행한다. 행의 개수 < 열의 개수인 경우에 적용된다.
> 한 행 또는 열에 있는 수를 정렬하려면, 각각의 수가 몇 번 나왔는지 알아야 한다. 그 다음, 수의 등장 횟수가 커지는 순으로, 그러한 것이 여러가지면 수가 커지는 순으로 정렬한다. 그 다음에는 배열 A에 정렬된 결과를 다시 넣어야 한다. 정렬된 결과를 배열에 넣을 때는, 수와 등장 횟수를 모두 넣으며, 순서는 수가 먼저이다.
예를 들어, [3, 1, 1]에는 3이 1번, 1가 2번 등장한다. 따라서, 정렬된 결과는 [3, 1, 1, 2]가 된다. 다시 이 배열에는 3이 1번, 1이 2번, 2가 1번 등장한다. 다시 정렬하면 [2, 1, 3, 1, 1, 2]가 된다.
정렬된 결과를 배열에 다시 넣으면 행 또는 열의 크기가 달라질 수 있다. R 연산이 적용된 경우에는 가장 큰 행을 기준으로 모든 행의 크기가 변하고, C 연산이 적용된 경우에는 가장 큰 열을 기준으로 모든 열의 크기가 변한다. 행 또는 열의 크기가 커진 곳에는 0이 채워진다. 수를 정렬할 때 0은 무시해야 한다. 예를 들어, [3, 2, 0, 0]을 정렬한 결과는 [3, 2]를 정렬한 결과와 같다.
행 또는 열의 크기가 100을 넘어가는 경우에는 처음 100개를 제외한 나머지는 버린다.
배열 A에 들어있는 수와 r, c, k가 주어졌을 때, A[r][c]에 들어있는 값이 k가 되기 위한 최소 시간을 구해보자.

# 입력
> 첫째 줄에 r, c, k가 주어진다. (1 ≤ r, c, k ≤ 100)
둘째 줄부터 3개의 줄에 배열 A에 들어있는 수가 주어진다. 배열 A에 들어있는 수는 100보다 작거나 같은 자연수이다.

# 출력
> A[r][c]에 들어있는 값이 k가 되기 위한 연산의 최소 시간을 출력한다. 100초가 지나도 A[r][c] = k가 되지 않으면 -1을 출력한다.

# 풀이
첫 제출에는 75%에서 오답 처리가 되서 질문게시판을 찾아보니 반복횟수를 바꿔야 된다고해서
원래는 `t = 100, while(t--)` 이 코드에서 `for(int t = 0; t <= 100 t++)`로 반복문을 바꾸니 통과가 되었다.

# 코드
```c++
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

int r, c, k;

const int MAX = 101;

int arr[MAX][MAX];

int main()
{
	cin >> r >> c >> k;

	for (int i = 1; i <= 3; i++)
	{
		for (int j = 1; j <= 3; j++)
		{
			cin >> arr[i][j];
		}
	}

	int currentRow = 3;
	int currentCol = 3;

	int cnt = 0;

	int t = 100;

	bool found = false;

	for (int t = 0; t <= 100; t++)
	{
		if (arr[r][c] == k)
		{
			found = true;
			break;
		}

		if (currentRow >= currentCol)
		{
			int col = currentCol;
			for (int i = 1; i <= currentRow; i++)
			{
				vector<pair<int, int>> v;
				map<int, int> hashCnt;
				for (int j = 1; j <= col; j++)
				{
					if (arr[i][j] == 0)
						continue;
					hashCnt[arr[i][j]]++;
					arr[i][j] = 0;
				}

				auto iter = hashCnt.begin();
				auto iterEnd = hashCnt.end();

				for (; iter != iterEnd; iter++)
				{
					if (v.size() < 100)
						v.push_back({ iter->first, iter->second });
				}

				sort(v.begin(), v.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
					if (a.second != b.second)
						return a.second < b.second;
					else
						return a.first < b.first;
				});


				for (int j = 1; j <= v.size(); j++)
				{
					arr[i][j + (j - 1)] = v[j - 1].first;
					arr[i][(j + (j - 1)) + 1] = v[j - 1].second;
				}

				currentCol = max(currentCol, (int)v.size() * 2);
			}
		}
		else
		{
			int row = currentRow;
			for (int j = 1; j <= currentCol; j++)
			{
				vector<pair<int, int>> v;
				map<int, int> hashCnt;
				for (int i = 1; i <= row; i++)
				{
					if (arr[i][j] == 0)
						continue;
					hashCnt[arr[i][j]]++;
					arr[i][j] = 0;
				}

				auto iter = hashCnt.begin();
				auto iterEnd = hashCnt.end();

				for (; iter != iterEnd; iter++)
				{
					if (v.size() < 100)
						v.push_back({ iter->first, iter->second });
				}

				sort(v.begin(), v.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
					if (a.second != b.second)
						return a.second < b.second;
					else
						return a.first < b.first;
				});


				for (int i = 1; i <= v.size(); i++)
				{
					arr[i + (i - 1)][j] = v[i - 1].first;
					arr[(i + (i - 1)) + 1][j] = v[i - 1].second;
				}

				currentRow = max(currentRow, (int)v.size() * 2);
			}
		}


		cnt++;
	}

	if (found)
		cout << cnt << "\n";
	else
		cout << -1 << "\n";


	return 0;
}
```