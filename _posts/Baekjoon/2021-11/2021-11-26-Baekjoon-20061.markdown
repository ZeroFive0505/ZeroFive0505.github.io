---
layout: post
title: 모노미노도미노 2 
date: 2021-11-26 09:21:14 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/20061)
# 모노미노도미노 2 

# 풀이
[모노미노도미노](https://www.acmicpc.net/problem/19235)에서 약간의 수정만 하면 바로 통과가 되는 문제였다. 모노미노도미노에서는 내릴 수 있는 만큼 내린다면 여기서는 간단하게 무조건 한칸씩만 내리게 하면 된다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int N;

int scores = 0;

int figureNum = 1;

int blockCnt = 0;

int area[10][4][2];

vector<pair<int, pair<int, int>>> v;

struct sPos
{
	int x;
	int y;
}Delta[] = {
	{0, 1},
	{0, -1},
	{1, 0},
	{-1, 0}
};

void Remove(int idx, int c)
{
	for (int i = 0; i < 4; i++)
	{
		if (area[idx][i][c] != 0)
		{
			blockCnt--;
			area[idx][i][c] = 0;
		}
	}
}


void SetBlock(int type, int x, int y)
{
	switch (type)
	{
	case 1:
	{
		int bIdx = y + 1;

		while (bIdx < 10 && area[bIdx][x][0] == 0)
			bIdx++;

		area[bIdx - 1][x][0] = figureNum;

		int gIdx = x + 1;

		while (gIdx < 10 && area[gIdx][y][1] == 0)
			gIdx++;

		area[gIdx - 1][y][1] = figureNum++;

		blockCnt = blockCnt + 2;
	}
	break;
	case 2:
	{
		int bIdx = y + 2;

		while (bIdx < 10 && area[bIdx][x][0] == 0)
			bIdx++;

		area[bIdx - 1][x][0] = figureNum;
		area[bIdx - 2][x][0] = figureNum;

		int gIdx = x = 1;

		while (gIdx < 10 && (area[gIdx][y][1] == 0 && area[gIdx][y + 1][1] == 0))
			gIdx++;

		area[gIdx - 1][y][1] = figureNum;
		area[gIdx - 1][y + 1][1] = figureNum++;

		blockCnt = blockCnt + 4;
	}
	break;
	case 3:
	{
		int bIdx = y + 1;

		while (bIdx < 10 && (area[bIdx][x][0] == 0 && area[bIdx][x + 1][0] == 0))
			bIdx++;

		area[bIdx - 1][x][0] = figureNum;
		area[bIdx - 1][x + 1][0] = figureNum;

		int gIdx = x + 2;

		while (gIdx < 10 && area[gIdx][y][1] == 0)
			gIdx++;

		area[gIdx - 1][y][1] = figureNum;
		area[gIdx - 2][y][1] = figureNum++;

		blockCnt = blockCnt + 4;
	}
	break;
	}
}

void Move(int idx, int c)
{
	if (idx == 3)
		return;

	int moveIdx = idx - 1;

	for (int i = 0; i < 4; i++)
	{
		if (area[moveIdx][i][c] == 0)
			continue;

		int x = moveIdx;
		int y = i;
		int val = area[x][y][c];
		bool flag = false;

		for (int j = 0; j < 4; j++)
		{
			int xx = moveIdx + Delta[j].y;
			int yy = y + Delta[j].x;

			if (xx >= 4 && xx < 10 && yy >= 0 && y < 4)
			{
				if (area[x][y][c] == area[xx][yy][c])
				{
					flag = true;

					int tempX = x + 1;
					int cnt = 1;

					while (1)
					{
						if (tempX < 10 && area[tempX][y][c] == val)
						{
							cnt = 987654321;
							break;
						}

						if (area[tempX][y][c] != 0 || tempX >= 10)
							break;

						tempX++;
						cnt++;
					}

					cnt--;

					int tempXX = xx + 1;

					int cnt2 = 1;

					while (1)
					{
						if (tempXX < 10 && area[tempXX][yy][c] == val)
						{
							cnt2 = 987654321;
							break;
						}

						if (area[tempXX][yy][c] != 0 || tempXX >= 10)
							break;

						tempXX++;
						cnt2++;
					}

					cnt2--;

					int moveCnt = min(cnt, cnt2);
					moveCnt = min(1, moveCnt);
					area[x + moveCnt][y][c] = area[x][y][c];
					area[xx + moveCnt][yy][c] = area[xx][yy][c];

					if (xx + moveCnt == x)
						area[x][y][c] = 0;
					else
						area[x][y][c] = area[xx][yy][c] = 0;

					break;
				}
			}
		}

		if (!flag)
		{
			int tempX = x + 1;
			int cnt = 1;

			while (tempX < 10 && area[tempX][y][c] == 0)
			{
				tempX++;
				cnt++;
			}

			cnt--;

			cnt = min(cnt, 1);

			area[x + cnt][y][c] = area[x][y][c];
			area[x][y][c] = 0;
		}
	}

	Move(idx - 1, c);
}

void RemoveBlock()
{
	for (int c = 0; c < 2; c++)
	{
		for (int i = 6; i < 10; i++)
		{
			int cnt = 0;

			for (int j = 0; j < 4; j++)
			{
				if (area[i][j][c] != 0)
					cnt++;
			}

			if (cnt == 4)
			{
				scores++;
				Remove(i, c);
				Move(i, c);
			}
		}
	}
}

void Check()
{
	for (int c = 0; c < 2; c++)
	{
		int cnt = 0;

		for (int sp = 4; sp < 6; sp++)
		{
			for (int i = 0; i < 4; i++)
			{
				if (area[sp][i][c] != 0)
				{
					cnt++;
					break;
				}
			}
		}

		if (cnt != 0)
		{
			for (int i = 0; i < cnt; i++)
			{
				Remove(9, c);
				Move(9, c);
			}
		}
	}
}

int main()
{
	cin >> N;

	for (int i = 0; i < N; i++)
	{
		int t, x, y;

		cin >> t >> x >> y;

		v.push_back({ t, {x, y} });
	}

	for (int i = 0; i < v.size(); i++)
	{
		int t = v[i].first;
		int x = v[i].second.first;
		int y = v[i].second.second;

		SetBlock(t, x, y);
		RemoveBlock();
		Check();
	}

	cout << scores << "\n";
	cout << blockCnt << "\n";

	return 0;
}
```
