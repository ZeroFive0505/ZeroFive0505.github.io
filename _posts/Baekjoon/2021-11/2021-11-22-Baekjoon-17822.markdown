---
layout: post
title: 원판 돌리기
date: 2021-11-22 09:29:02 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/17822)
# 원판 돌리기

# 풀이
배열을 돌리는 것은 간단하게 배열을 밀고 당기는 것으로 구현했다. 그리고 같은 수를 가지는 값을 찾을때는 BFS를 이용하여 인접한 공간의 수를 체크했다. 여기서 주의할 점은 반지름보다 작아지거나 커질때는 다시 이어지지 않는 것을 주의해야한다. 이거랑 평균치, 배열의 인덱스 경계선을 잘못 집어넣어서 한참을 헤맨 문제다...

# 코드
```c++
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int MAX = 51;

int N, M;

int T;

int arr[MAX][MAX];

struct sPos
{
	int r;
	int c;

	sPos() : r(0), c(0) {}


	sPos(int _r, int _c) : r(_r), c(_c) {}

}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

bool BFS(int r, int c, int num)
{
	bool visited[MAX][MAX] = {};

	queue<sPos> q;
	vector<sPos> v;

	q.push(sPos(r, c));
	v.push_back(sPos(r, c));

	visited[r][c] = true;

	while (!q.empty())
	{
		sPos cur = q.front();
		int cr = cur.r;
		int cc = cur.c;
		q.pop();
		
		for (int i = 0; i < 4; i++)
		{
			int nr = cr + Delta[i].r;
			int nc = cc + Delta[i].c;

            // 반지름이 1보다 작아지거나
			if (nr < 1)
				continue;
            // N보다 커지면 건너뛴다.
			if (nr > N)
				continue;

            // 양옆으로 이어지게 한다.
			if (nc < 1)
				nc = M;
			if (nc > M)
				nc = 1;

			if (visited[nr][nc] || arr[nr][nc] != num || arr[nr][nc] == 0)
				continue;

			q.push(sPos(nr, nc));
			v.push_back(sPos(nr, nc));
			visited[nr][nc] = true;
		}
	}

    // 만약 인접한 수들중에 같은 수를 가지는 곳이 있다면 갱신한다.
	if (v.size() >= 2)
	{
		for (int i = 0; i < v.size(); i++)
		{
			arr[v[i].r][v[i].c] = 0;
		}

		return true;
	}
	else
		return false;
}

void Rotate(int x, int d, bool ccw)
{
	int tempArr[MAX] = {};

	if (ccw)
	{   
        // x만큼 더해줘야한다. *2를 하면 바로 오답처리된다.
		for (int xx = x; xx <= N; xx += x)
		{
			for (int i = 1; i <= M; i++)
			{
				tempArr[i] = arr[xx][i];
			}

			int temp = arr[xx][1];

			for (int i = 1; i <= M - 1; i++)
			{
				arr[xx][i] = tempArr[i + 1];
			}

			arr[xx][M] = temp;
		}
	}
	else
	{
		for (int xx = x; xx <= N; xx += x)
		{
			for (int i = 1; i <= M; i++)
			{
				tempArr[i] = arr[xx][i];
			}

			int temp = arr[xx][M];

			for (int i = 1; i <= M - 1; i++)
			{
				arr[xx][i + 1] = tempArr[i];
			}

			arr[xx][1] = temp;
		}
	}
}

int main()
{
	cin >> N >> M >> T;

	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= M; j++)
		{
			cin >> arr[i][j];
		}
	}

	while (T--)
	{
		int x, d, k;

		cin >> x >> d >> k;

		switch (d)
		{
		case 0:
			for (int i = 0; i < k; i++)
			{
				Rotate(x, d, false);
			}
			break;
		case 1:
			for (int i = 0; i < k; i++)
			{
				Rotate(x, d, true);
			}
			break;
		}

		bool found = false;

        // BFS를 한다.
		for (int i = 1; i <= N; i++)
		{
			for (int j = 1; j <= M; j++)
			{
				if (arr[i][j] != 0)
				{
					found |= BFS(i, j, arr[i][j]);
				}
			}
		}

        // 만약 같은 수를 가지는 곳이 없었다면
		if (!found)
		{
			int sum = 0;
			int cnt = 0;


			for (int i = 1; i <= N; i++)
			{
				for (int j = 1; j <= M; j++)
				{
					if (arr[i][j] != 0)
					{
						sum += arr[i][j];
						cnt++;
					}
				}
			}

            // 평균을 구한다.
			double avg = (double)sum / cnt;

			for (int i = 1; i <= N; i++)
			{
				for (int j = 1; j <= M; j++)
				{
                    // 0인 지점은 건너뛴다.
					if (arr[i][j] == 0)
						continue;
                    
					if (arr[i][j] > avg)
						arr[i][j]--;
					else if (arr[i][j] < avg)
						arr[i][j]++;
				}
			}
		}
	}

	int ans = 0;

	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= M; j++)
		{
			ans += arr[i][j];
		}
	}

	cout << ans << "\n";

	return 0;
}
```
