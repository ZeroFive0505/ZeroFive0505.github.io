---
layout: post
title: 다리 만들기
date: 2021-07-08 13:30:02 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/2146)
# 다리 만들기

# 문제
> 여러 섬으로 이루어진 나라가 있다. 이 나라의 대통령은 섬을 잇는 다리를 만들겠다는 공약으로 인기몰이를 해 당선될 수 있었다. 하지만 막상 대통령에 취임하자, 다리를 놓는다는 것이 아깝다는 생각을 하게 되었다. 그래서 그는, 생색내는 식으로 한 섬과 다른 섬을 잇는 다리 하나만을 만들기로 하였고, 그 또한 다리를 가장 짧게 하여 돈을 아끼려 하였다. 이 나라는 N×N크기의 이차원 평면상에 존재한다. 이 나라는 여러 섬으로 이루어져 있으며, 섬이란 동서남북으로 육지가 붙어있는 덩어리를 말한다. 다음은 세 개의 섬으로 이루어진 나라의 지도이다.

> ![Img](https://www.acmicpc.net/JudgeOnline/upload/201008/bri.PNG)

> 위의 그림에서 색이 있는 부분이 육지이고, 색이 없는 부분이 바다이다. 이 바다에 가장 짧은 다리를 놓아 두 대륙을 연결하고자 한다. 가장 짧은 다리란, 다리가 격자에서 차지하는 칸의 수가 가장 작은 다리를 말한다. 다음 그림에서 두 대륙을 연결하는 다리를 볼 수 있다.

> ![Img](https://www.acmicpc.net/JudgeOnline/upload/201008/b2.PNG)

> 물론 위의 방법 외에도 다리를 놓는 방법이 여러 가지 있으나, 위의 경우가 놓는 다리의 길이가 3으로 가장 짧다(물론 길이가 3인 다른 다리를 놓을 수 있는 방법도 몇 가지 있다). 지도가 주어질 때, 가장 짧은 다리 하나를 놓아 두 대륙을 연결하는 방법을 찾으시오.

# 입력
> 첫 줄에는 지도의 크기 N(100이하의 자연수)가 주어진다. 그 다음 N줄에는 N개의 숫자가 빈칸을 사이에 두고 주어지며, 0은 바다, 1은 육지를 나타낸다. 항상 두 개 이상의 섬이 있는 데이터만 입력으로 주어진다.

# 출력
> 첫째 줄에 가장 짧은 다리의 길이를 출력한다.

# 코드
```C++
#include <iostream>
#include <queue>

using namespace std;

struct sDelta
{
	int x;
	int y;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

struct sPos
{
	int x;
	int y;
	int dist;

	sPos(int x, int y, int dist) : x(x), y(y), dist(dist) {}
};

int N;

const int MAX = 100;

const int INF = 987654321;

void Numbering(vector<vector<int>>& lands, vector<vector<bool>>& visited, int y, int x, int areaNum)
{
	visited[y][x] = true;
	queue<pair<int, int>> q;
	lands[y][x] = areaNum;
	q.push({ y, x });

	while (!q.empty())
	{
		pair<int, int> cur = q.front();
		q.pop();
		int cx = cur.second;
		int cy = cur.first;

		for (int i = 0; i < 4; i++)
		{
			int nx = cx + Delta[i].x;
			int ny = cy + Delta[i].y;

			if (nx < 0 || ny < 0 || nx >= N || ny >= N)
				continue;

			if (visited[ny][nx] || lands[ny][nx] == 0)
				continue;

			visited[ny][nx] = true;
			lands[ny][nx] = areaNum;
			q.push({ ny, nx });
		}
	}
}

int BFS(vector<vector<int>>& lands, vector<vector<bool>>& visited, int y, int x, int areaNum)
{
	queue<sPos> q;

	q.push(sPos(x, y, 0));
	visited[y][x] = true;

	while (!q.empty())
	{
		sPos cur = q.front();
		q.pop();
		int cx = cur.x;
		int cy = cur.y;
		int dist = cur.dist;

		if (lands[cy][cx] != 0 && lands[cy][cx] != areaNum)
			return dist;

		for (int i = 0; i < 4; i++)
		{
			int nx = cx + Delta[i].x;
			int ny = cy + Delta[i].y;

			if (nx < 0 || ny < 0 || nx >= N || ny >= N)
				continue;

			if (visited[ny][nx])
				continue;

			if (areaNum == lands[ny][nx])
				continue;

			visited[ny][nx] = true;
			q.push(sPos(nx, ny, dist + 1));
		}
	}


	return INF;
}

void Reset(vector<vector<bool>>& visited)
{
	for (int i = 0; i < visited.size(); i++)
	{
		for (int j = 0; j < visited[i].size(); j++)
		{
			visited[i][j] = false;
		}
	}
}

int main()
{
	cin >> N;
	vector<vector<int>> lands(N, vector<int>(N, 0));

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> lands[i][j];
		}
	}

	vector<vector<bool>> visited(N, vector<bool>(N, false));
	int areaNum = 1;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (lands[i][j] != 0 && !visited[i][j])
			{
				Numbering(lands, visited, i, j, areaNum);
				areaNum++;
			}
		}
	}


	int minDist = INF;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (lands[i][j] != 0)
			{
				Reset(visited);
				minDist = min(minDist, BFS(lands, visited, i, j, lands[i][j]));
			}
		}
	}

	cout << minDist - 1 << "\n";

	return 0;
}
```

# 풀이
메모리 초과 때문에 좀 고생한 문제이다.. 방문 배열을 안 써도 답을 구할 순 있지만 메모리 사용량이 급격하게 늘어나서 결국에는 메모리 초과로 실패가 떴다. 따라서 영역 번호를 부여하고나서 다시 방문 배열을 BFS할때마다 초기화하고 이용해서 늘어나는 큐의 사이즈를 억제해 해결할 수 있었다.