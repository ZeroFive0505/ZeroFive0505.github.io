---
layout: post
title: 빙산
date: 2021-07-06 10:42:44 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/2573)
# 빙산

# 코드
```c++
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int N, M;

struct sDelta
{
	int x;
	int y;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};


int Melt(vector<vector<int>>& iceberg, int y, int x)
{
	int cnt = 0;

	for (int i = 0; i < 4; i++)
	{
		int nx = x + Delta[i].x;
		int ny = y + Delta[i].y;

		if (nx < 0 || ny < 0 || ny >= N || nx >= M)
			continue;

		if(iceberg[ny][nx] == 0)
			cnt++;
	}

	return cnt;
}

void BFS(vector<vector<int>>& iceberg, vector<vector<bool>>& visited, int y, int x)
{
	visited[y][x] = true;
	queue<pair<int, int>> q;

	q.push({ y, x });

	while (!q.empty())
	{
		pair<int, int> cur = q.front();
		q.pop();
		int cx = cur.second;
		int cy = cur.first;

		for (int i = 0; i < 4; i++)
		{
			int nx = cx + Delta[i].x;
			int ny = cy + Delta[i].y;

			if (nx < 0 || ny < 0 || ny >= N || nx >= M)
				continue;

			if (visited[ny][nx] || iceberg[ny][nx] <= 0)
				continue;

			visited[ny][nx] = true;
			q.push({ ny, nx });
		}
	}
}

int main()
{
	cin >> N >> M;

	vector<vector<int>> iceberg(N, vector<int>(M, 0));
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> iceberg[i][j];
		}
	}

	int areaCnt = 0;
	int year = 0;
	bool allMelt = false;
	while (1)
	{
		vector<vector<int>> after(N, vector<int>(M, 0));

		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				if (iceberg[i][j] != 0)
				{
					after[i][j] = Melt(iceberg, i, j);
				}
			}
		}

		year++;

		vector<vector<bool>> visited(N, vector<bool>(M, false));
		int zeroCnt = 0;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				iceberg[i][j] -= after[i][j];
				if (iceberg[i][j] <= 0)
				{
					iceberg[i][j] = 0;
					zeroCnt++;
				}
			}
		}

		if (zeroCnt == N * M)
		{
			allMelt = true;
			break;
		}

		areaCnt = 0;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				if (!visited[i][j] && iceberg[i][j])
				{
					BFS(iceberg, visited, i, j);
					areaCnt++;
				}
			}
		}

		if (areaCnt >= 2)
			break;

	}

	if (allMelt)
		cout << 0 << "\n";
	else
		cout << year << "\n";


	return 0;
}
```

# 풀이
그림3에 오류가 있어서 내가 문제를 잘 못 이해한건가 싶었다.. 매번 빙산에서 4방향으로 0의 숫자를 찾고 그걸 빼주고 만약 모두 0이된다면 반복문을 나가고 또는 영역의 수가 2 이상이 되면 나가게 했다.