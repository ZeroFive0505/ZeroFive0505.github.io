---
layout: post
title: 영역 구하기
date: 2021-07-01 12:14:45 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/2583)
# 영역 구하기

# 문제
> 눈금의 간격이 1인 M×N(M,N≤100)크기의 모눈종이가 있다. 이 모눈종이 위에 눈금에 맞추어 K개의 직사각형을 그릴 때, 이들 K개의 직사각형의 내부를 제외한 나머지 부분이 몇 개의 분리된 영역으로 나누어진다. 예를 들어 M=5, N=7 인 모눈종이 위에 <그림 1>과 같이 직사각형 3개를 그렸다면, 그 나머지 영역은 <그림 2>와 같이 3개의 분리된 영역으로 나누어지게 된다.
![Image](https://www.acmicpc.net/upload/images/zzJD2aQyF5Rm4IlOt.png)
<그림 2>와 같이 분리된 세 영역의 넓이는 각각 1, 7, 13이 된다. 
M, N과 K 그리고 K개의 직사각형의 좌표가 주어질 때, K개의 직사각형 내부를 제외한 나머지 부분이 몇 개의 분리된 영역으로 나누어지는지, 그리고 분리된 각 영역의 넓이가 얼마인지를 구하여 이를 출력하는 프로그램을 작성하시오.

# 입력
> 첫째 줄에 M과 N, 그리고 K가 빈칸을 사이에 두고 차례로 주어진다. M, N, K는 모두 100 이하의 자연수이다. 둘째 줄부터 K개의 줄에는 한 줄에 하나씩 직사각형의 왼쪽 아래 꼭짓점의 x, y좌표값과 오른쪽 위 꼭짓점의 x, y좌표값이 빈칸을 사이에 두고 차례로 주어진다. 모눈종이의 왼쪽 아래 꼭짓점의 좌표는 (0,0)이고, 오른쪽 위 꼭짓점의 좌표는(N,M)이다. 입력되는 K개의 직사각형들이 모눈종이 전체를 채우는 경우는 없다.

# 출력
> 첫째 줄에 분리되어 나누어지는 영역의 개수를 출력한다. 둘째 줄에는 각 영역의 넓이를 오름차순으로 정렬하여 빈칸을 사이에 두고 출력한다.

# 풀이
그림과 달리 배열은 왼쪽위부터 0, 0으로 시작하니 사각형이 뒤집혀지긴 하지만.. 문제를 푸는데 전혀 지장이 없다고 생각해서 그대로 풀었다.. 마지막에 정렬만 해줘서 출력하면 된다.

# 코드
```C++
#include <iostream>
#include <queue>
#include <algorithm>
#include <vector>

using namespace std;

struct sDelta
{
	int x;
	int y;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

int BFS(int y, int x, vector<vector<int>>& rect, vector<vector<bool>>& visited)
{
	queue<pair<int, int>> q;
	visited[y][x] = true;
	int cnt = 1;

	q.push({ y, x });

	while (!q.empty())
	{
		pair<int, int> cur = q.front();
		q.pop();
		int curY = cur.first;
		int curX = cur.second;

		for (int i = 0; i < 4; i++)
		{
			int ny = curY + Delta[i].y;
			int nx = curX + Delta[i].x;

			if (ny < 0 || nx < 0 || ny >= rect.size() || nx >= rect[0].size())
				continue;

			if (rect[ny][nx] == 1 || visited[ny][nx])
				continue;

			visited[ny][nx] = true;
			q.push({ ny, nx });
			cnt++;
		}
	}

	return cnt;
}

int main()
{
	int M, N, K;

	cin >> M >> N >> K;

	vector<vector<int>> rect(M, vector<int>(N, 0));

	for (int i = 0; i < K; i++)
	{
		int xLower, yLower, xUpper, yUpper;

		cin >> xLower >> yLower >> xUpper >> yUpper;

		for (int y = yLower; y < yUpper; y++)
		{
			for (int x = xLower; x < xUpper; x++)
			{
				rect[y][x] = 1;
			}
		}
	}

	int areaCnt = 0;
	vector<int> areas;
	vector<vector<bool>> visited(M, vector<bool>(N, false));
	for (int i = 0; i < rect.size(); i++)
	{
		for (int j = 0; j < rect[0].size(); j++)
		{
			if (rect[i][j] == 0 && !visited[i][j])
			{
				areaCnt++;
				int num = BFS(i, j, rect, visited);
				areas.push_back(num);
			}
		}
	}

	cout << areaCnt << "\n";
	sort(areas.begin(), areas.end());
	for (auto i : areas)
		cout << i << " ";
	cout << "\n";

	return 0;
}
```