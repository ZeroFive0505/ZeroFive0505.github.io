---
layout: post
title: 적록색약
date: 2021-07-05 12:13:53 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/10026)
# 적록색약

# 문제
> 적록색약은 빨간색과 초록색의 차이를 거의 느끼지 못한다. 따라서, 적록색약인 사람이 보는 그림은 아닌 사람이 보는 그림과는 좀 다를 수 있다. 크기가 N×N인 그리드의 각 칸에 R(빨강), G(초록), B(파랑) 중 하나를 색칠한 그림이 있다. 그림은 몇 개의 구역으로 나뉘어져 있는데, 구역은 같은 색으로 이루어져 있다. 또, 같은 색상이 상하좌우로 인접해 있는 경우에 두 글자는 같은 구역에 속한다. (색상의 차이를 거의 느끼지 못하는 경우도 같은 색상이라 한다)

# 입력
> 첫째 줄에 N이 주어진다. (1 ≤ N ≤ 100) 둘째 줄부터 N개 줄에는 그림이 주어진다.

# 출력
> 적록색약이 아닌 사람이 봤을 때의 구역의 개수와 적록색약인 사람이 봤을 때의 구역의 수를 공백으로 구분해 출력한다.

# 풀이
처음에는 RGB정보가 담긴 배열을 수정하지 않고 풀었는데 예제는 답이 잘 나오길래 제출을 했는데 틀렸다.. 어디서 틀린지 잘 모르겠다. 결국에는 적록색약을 검사할때는 배열을 수정해서 BFS를 진행했더니 정답이 됬다..

```C++
#include <iostream>
#include <string>
#include <vector>
#include <queue>

using namespace std;

int N;

struct sDelta
{
	int x;
	int y;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

void BFS(vector<string>& colors, vector<vector<bool>>& visited, int y, int x)
{
	visited[y][x] = true;

	queue<pair<int, int>> q;

	q.push({ y, x });


	char c = colors[y][x];

	while (!q.empty())
	{
		pair<int, int> cur = q.front();
		q.pop();

		int curX = cur.second;
		int curY = cur.first;

		for (int i = 0; i < 4; i++)
		{
			int nx = curX + Delta[i].x;
			int ny = curY + Delta[i].y;

			if (nx < 0 || ny < 0 || nx >= N || ny >= N)
				continue;

			if (visited[ny][nx] || c != colors[ny][nx])
				continue;

			visited[ny][nx] = true;
			q.push({ ny, nx });
		}
	}
}

int main()
{
	cin >> N;
	vector<string> colors;
	string rgb;
	for (int i = 0; i < N; i++)
	{
		cin >> rgb;
		colors.push_back(rgb);
	}

	vector<vector<bool>> normal(N, vector<bool>(N, false));
	vector<vector<bool>> weak(N, vector<bool>(N, false));

	int cnt1 = 0;
	int cnt2 = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (!normal[i][j])
			{
				BFS(colors, normal, i, j);
				cnt1++;
			}
		}
	}

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (colors[i][j] == 'R')
				colors[i][j] = 'G';
		}
	}

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (!weak[i][j])
			{
				BFS(colors, weak, i, j);
				cnt2++;
			}
		}
	}



	cout << cnt1 << " " << cnt2 << "\n";

	return 0;
}
```