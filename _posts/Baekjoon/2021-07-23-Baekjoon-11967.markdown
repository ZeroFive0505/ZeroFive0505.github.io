---
layout: post
title: 불켜기
date: 2021-07-23 10:13:07 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/11967)
# 불켜기

# 문제
> 농부 존은 최근에 N*N개의 방이 있는 거대한 헛간을 새로 지었다. 각 방은 (1, 1)부터 (N,N)까지 번호가 매겨져있다(2≤N≤100). 어둠을 무서워하는 암소 베시는 최대한 많은 방에 불을 밝히고 싶어한다. 베시는 유일하게 불이 켜져있는 방인 (1,1)방에서 출발한다. 어떤 방에는 다른 방의 불을 끄고 켤 수 있는 스위치가 달려있다. 예를 들어, (1, 1)방에 있는 스위치로 (1, 2)방의 불을 끄고 켤 수 있다. 베시는 불이 켜져있는 방으로만 들어갈 수 있고, 각 방에서는 상하좌우에 인접한 방으로 움직일 수 있다. 베시가 불을 켤 수 있는 방의 최대 개수를 구하시오.

# 입력
> 첫 번째 줄에는 N(2≤N≤100)과, M(1≤M≤20,000)이 정수로 주어진다. 다음 M줄에는 네 개의 정수 x, y, a, b가 주어진다. (x, y)방에서 (a, b)방의 불을 켜고 끌 수 있다는 의미이다. 한 방에 여러개의 스위치가 있을 수 있고, 하나의 불을 조절하는 스위치 역시 여러개 있을 수 있다. 

# 출력
> 베시가 불을 켤 수 있는 방의 최대 개수를 출력하시오.

# 코드
```c++
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int SIZE = 101;

struct sPos
{
	int x;
	int y;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

vector<sPos> SWITCH[SIZE][SIZE];
bool VISITED[SIZE][SIZE];
bool LIGHT[SIZE][SIZE];

const int INF = 987654321;

int N, M;
int x, y, a, b;

int main()
{
	cin >> N >> M;

	for (int i = 0; i < M; i++)
	{
		cin >> x >> y >> a >> b;

		SWITCH[x][y].push_back({ a, b });
	}

	int cnt = 1;

	int lastCnt = cnt;
	LIGHT[1][1] = true;

	do
	{
		queue<sPos> q;
		q.push({ 1, 1 });
		lastCnt = cnt;


		for (int i = 0; i < SIZE; i++)
		{
			for (int j = 0; j < SIZE; j++)
			{
				VISITED[i][j] = false;
			}
		}

		VISITED[1][1] = true;

		while (!q.empty())
		{
			sPos cur = q.front();
			q.pop();
			int cx = cur.x;
			int cy = cur.y;

			for (const auto& it : SWITCH[cx][cy])
			{
				if (!LIGHT[it.x][it.y])
				{
					cnt++;
					LIGHT[it.x][it.y] = true;
				}
			}

			for (int i = 0; i < 4; i++)
			{
				int nx = cx + Delta[i].x;
				int ny = cy + Delta[i].y;

				if (nx < 0 || ny < 0 || nx > SIZE || ny > SIZE)
					continue;

				if (VISITED[nx][ny])
					continue;

				if (LIGHT[nx][ny])
				{
					VISITED[nx][ny] = true;
					q.push({ nx, ny });
				}
			}
		}
	} while (lastCnt != cnt);

	cout << cnt << "\n";
	
	return 0;
}
```

# 풀이
풀을 키고나면 그동안 지나온 곳에 새롭게 갈 수 있는 길이 생길지도 모르기에 처음에는 지금까지 왔던 길을 기록하고 다시 돌아가면서 갈 수 있는 길이 있는지를 확인하는 방법으로 해보려고 했지만 잘 안됬다. 그것보다 간단하게 `do while`문으로 저번에 마지막으로 불을 킨 갯수가 지금과 다르다면 다시 한번 방문배열을 초기화하고 BFS를 하는 방법으로 풀 수 있었다.