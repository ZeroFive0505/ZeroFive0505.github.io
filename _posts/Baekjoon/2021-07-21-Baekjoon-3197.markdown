---
layout: post
title: 백조의 호수
date: 2021-07-21 11:17:48 +0900
categories: Baekjoon
---


## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/3197)
# 백조의 호수

# 문제
> 두 마리의 백조가 호수에서 살고 있었다. 그렇지만 두 마리는 호수를 덮고 있는 빙판으로 만나지 못한다. 호수는 행이 R개, 열이 C개인 직사각형 모양이다. 어떤 칸은 얼음으로 덮여있다. 호수는 차례로 녹는데, 매일 물 공간과 접촉한 모든 빙판 공간은 녹는다. 두 개의 공간이 접촉하려면 가로나 세로로 닿아 있는 것만 (대각선은 고려하지 않는다) 생각한다. 백조는 오직 물 공간에서 세로나 가로로만(대각선은 제외한다) 움직일 수 있다. 며칠이 지나야 백조들이 만날 수 있는 지 계산하는 프로그램을 작성하시오.

# 입력
> 입력의 첫째 줄에는 R과 C가 주어진다. 단, 1 ≤ R, C ≤ 1500. 다음 R개의 줄에는 각각 길이 C의 문자열이 하나씩 주어진다. '.'은 물 공간, 'X'는 빙판 공간, 'L'은 백조가 있는 공간으로 나타낸다.

# 출력
> 첫째 줄에 문제에서 주어진 걸리는 날을 출력한다.

# 첫 시도
```c++
#include <iostream>
#include <queue>

using namespace std;

struct sDelta
{
	int x;
	int y;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

const int SIZE = 1501;

char LAKE[SIZE][SIZE];
bool VISITED[SIZE][SIZE];

int R, C;

bool BFS(pair<int, int> pos)
{
	VISITED[pos.first][pos.second] = true;

	bool not_first = false;

	queue<pair<int, int>> q;

	q.push(pos);

	while (!q.empty())
	{
		pair<int, int> cur = q.front();
		int cx = cur.second;
		int cy = cur.first;
		q.pop();

		if (not_first && LAKE[cy][cx] == 'L')
			return true;

		not_first = true;

		for (int i = 0; i < 4; i++)
		{
			int nx = cx + Delta[i].x;
			int ny = cy + Delta[i].y;

			if (nx < 1 || ny < 1 || nx > C || ny > R)
				continue;

			if (VISITED[ny][nx] || LAKE[ny][nx] == 'X')
				continue;

			VISITED[ny][nx] = true;
			q.push({ ny, nx });
		}
	}

	return false;
}

bool Melt(int y, int x)
{
	for (int i = 0; i < 4; i++)
	{
		int nx = x + Delta[i].x;
		int ny = y + Delta[i].y;

		if (nx < 1 || ny < 1 || nx > C || ny > R)
			continue;

		if (LAKE[ny][nx] == '.')
			return true;
	}

	return false;
}


void ResetVisited()
{
	for (int i = 1; i <= R; i++)
	{
		for (int j = 1; j <= C; j++)
		{
			VISITED[i][j] = false;
		}
	}
}

int main()
{
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			LAKE[i][j] = '.';
		}
	}

	cin >> R >> C;

	pair<int, int> pos = { -1, -1 };

	for (int i = 1; i <= R; i++)
	{
		for (int j = 1; j <= C; j++)
		{
			cin >> LAKE[i][j];

			if (LAKE[i][j] == 'L' && pos.first == -1 && pos.second == -1)
				pos = { i, j };
		}
	}

	int day = 0;

	while (true)
	{
		if (BFS(pos))
			break;

		ResetVisited();

		queue<pair<int, int>> meltQ;
		for (int i = 1; i <= R; i++)
		{
			for (int j = 1; j <= C; j++)
			{
				if (LAKE[i][j] == 'X')
				{
					if (Melt(i, j))
						meltQ.push({ i, j });
				}
			}
		}

		while (!meltQ.empty())
		{
			pair<int, int> m = meltQ.front();
			meltQ.pop();

			LAKE[m.first][m.second] = '.';
		}

		day++;
	}

	cout << day << "\n";

	return 0;
}
```

# 결과
결과는 시간초과였다. 아무래도 최대 1500 x 1500의 크기를 매번 BFS 돌리는게 많이 부담이 되는 것 같다. 인터넷에서 조사를 해보니 버퍼 큐를 이용해야한다는 사실을 알게되었다.

# 코드
```c++
#include <iostream>
#include <queue>

using namespace std;

struct sDelta
{
	int x;
	int y;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

const int SIZE = 1501;

char LAKE[SIZE][SIZE];
bool VISITED[SIZE][SIZE];

int R, C;

queue<pair<int, int>> swan_q, swan_buffer;
queue<pair<int, int>> melt_q, melt_buffer;

bool BFS()
{
	bool not_first = false;
	while (!swan_q.empty())
	{
		pair<int, int> cur = swan_q.front();
		int cx = cur.second;
		int cy = cur.first;
		swan_q.pop();
		if (not_first && LAKE[cy][cx] == 'L')
			return true;
		not_first = true;

		for (int i = 0; i < 4; i++)
		{
			int nx = cx + Delta[i].x;
			int ny = cy + Delta[i].y;

			if (nx < 1 || ny < 1 || nx > C || ny > R)
				continue;

			if (VISITED[ny][nx])
				continue;

			if (LAKE[ny][nx] == 'L')
			{
				VISITED[ny][nx] = true;
				return true;
			}
			else if (LAKE[ny][nx] == 'X')
			{
				VISITED[ny][nx] = true;
				swan_buffer.push({ ny, nx });
			}
			else if (LAKE[ny][nx] == '.')
			{
				VISITED[ny][nx] = true;
				swan_q.push({ ny, nx });
			}
		}
	}

	return false;
}

void Melt()
{
	while (!melt_q.empty())
	{
		pair<int, int> cur = melt_q.front();
		melt_q.pop();

		int cx = cur.second;
		int cy = cur.first;

		for (int i = 0; i < 4; i++)
		{
			int nx = cx + Delta[i].x;
			int ny = cy + Delta[i].y;

			if (nx < 1 || ny < 1 || nx > C || ny > R)
				continue;

			if (LAKE[ny][nx] == 'X')
			{
				LAKE[ny][nx] = '.';
				melt_buffer.push({ ny, nx });
			}
		}
	}
}

int main()
{
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			LAKE[i][j] = '.';
		}
	}

	cin >> R >> C;

	pair<int, int> pos = { -1, -1 };

	for (int i = 1; i <= R; i++)
	{
		for (int j = 1; j <= C; j++)
		{
			cin >> LAKE[i][j];

			if (LAKE[i][j] != 'X')
				melt_q.push({ i, j });
			if (LAKE[i][j] == 'L' && pos.first == -1 && pos.second == -1)
				pos = { i, j };
		}
	}

	swan_q.push(pos);
	VISITED[pos.first][pos.second] = true;
	int day = 0;

	while (true)
	{
		if (BFS())
			break;

		Melt();

		swan_q = swan_buffer;
		melt_q = melt_buffer;

		while (!swan_buffer.empty())
			swan_buffer.pop();

		while (!melt_buffer.empty())
			melt_buffer.pop();

		day++;
	}

	cout << day << "\n";

	return 0;
}
```

# 풀이
큐를 4개나 써야했다. 이런식으로 하면 초기화 배열을 매번 초기화할 필요도 없어졌다. 먼저 물과 백조를 위한 버퍼 큐를 준비한다. 초기에는 물이 들어갈 큐에 모든 물을 넣는다. 먼저 백조를 BFS로 움직인다. 움직일때 만약 얼음을 만났다면 이제 이 공간들이 다음 백조의 후보 공간이 된다. 따라서 이 공간들을 버퍼 큐에 넣어준다. 물도 비숫하다 물도 BFS로 퍼져나가면서 얼음을 만났을 경우 녹이고 그 위치를 버퍼 큐에 넣어준다. 무한 반복문에서는 백조가 만날 수 있을때까지 반복하면서 큐와 버퍼 큐의 내용을 스왑한다.