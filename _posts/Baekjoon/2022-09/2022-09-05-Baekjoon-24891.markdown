---
layout: post
title: 단어 마방진
date: 2022-09-05 10:18:43 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/24891)
# 단어 마방진

# 문제
> $L \times L$행렬에 $L^2$개의 알파벳을 적어 가로로 읽었을 때와 세로로 읽었을 때 얻는 단어들과 그 순서가 서로 같은 경우 우리는 이러한 행렬을 단어 마방진이라고 부른다.

> 예를 들어, 다음 행렬은 $5 \times 5$ 단어 마방진이다.

>	H	E	A	R	T
>	E	M	B	E	R
>	A	B	U	S	E
>	R	E	S	I	N
>	T	R	E	N	D

>인규는 길이가 L인 단어 N개가 주어졌을 때, 여기서 L개를 골라 크기가 L X L인 단어 마방진을 만들려고 한다. 하지만 인규는 곧 입대를 해야 해서 이 문제를 해결할 수 없었다. 인규를 위해 단어 마방진을 만드는 프로그램을 작성하시오.

# 입력
> 첫째 줄에 단어의 길이 L, 단어의 개수 N이 주어진다.
둘째 줄부터 N개의 줄에는 길이가 L인 단어가 한 줄에 하나씩 주어진다. 모든 단어는 알파벳 대문자로 이루어져 있으며, 같은 단어가 여러 번 주어질 수 있다.

# 출력
> 단어 마방진을 출력한다. 만들 수 있는 단어 마방진이 여러 개인 경우, 사전 순으로 가장 빠른 단어 마방진을 출력한다.
어떤 경우에도 단어 마방진을 만들 수 없는 경우 "NONE"을 따옴표를 제외하고 출력한다.

# 풀이
먼저 문자열을 한번 정렬을 해서 최대한 사전순으로 출력을 할 수 있도록 조정 후에 단어를 L개 고를때마다 마방진 조건을 만족하는지를 검사하고 만약 만족한다면 출력하고 바로 종료했다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

const int MAX = 20;

vector<string> words;
vector<string> board;
bool used[MAX] = {};

int L, N;

void DFS(int depth)
{
	if (depth >= L)
	{
		bool pass = true;

		for (int i = 0; i < board.size(); i++)
		{
			string a = board[i];

			string b;

			for (int j = 0; j < board[i].size(); j++)
				b.push_back(board[j][i]);

			if (a != b)
			{
				pass = false;
				break;
			}
		}

		if (pass)
		{
			for (int i = 0; i < board.size(); i++)
			{
				cout << board[i] << "\n";
			}

			cout << "\n";
			exit(0);
		}

		return;
	}

	for (int i = 0; i < N; i++)
	{
		if (!used[i])
		{
			used[i] = true;
			board.push_back(words[i]);
			DFS(depth + 1);
			used[i] = false;
			board.pop_back();
		}
	}
}

int main()
{
	cin >> L >> N;

	for (int i = 0; i < N; i++)
	{
		string s;
		cin >> s;
		words.push_back(s);
	}

	sort(words.begin(), words.end());

	DFS(0);

	cout << "NONE" << "\n";

	return 0;
}
```