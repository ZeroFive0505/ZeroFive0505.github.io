---
layout: post
title: 부등호
date: 2022-07-28 07:44:45 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/2529)
# 부등호

# 문제
> 두 종류의 부등호 기호 ‘<’와 ‘>’가 k개 나열된 순서열 A가 있다. 우리는 이 부등호 기호 앞뒤에 서로 다른 한 자릿수 숫자를 넣어서 모든 부등호 관계를 만족시키려고 한다. 예를 들어, 제시된 부등호 순서열 A가 다음과 같다고 하자. 
A ⇒ < < < > < < > < >
부등호 기호 앞뒤에 넣을 수 있는 숫자는 0부터 9까지의 정수이며 선택된 숫자는 모두 달라야 한다. 아래는 부등호 순서열 A를 만족시키는 한 예이다. 
3 < 4 < 5 < 6 > 1 < 2 < 8 > 7 < 9 > 0
이 상황에서 부등호 기호를 제거한 뒤, 숫자를 모두 붙이면 하나의 수를 만들 수 있는데 이 수를 주어진 부등호 관계를 만족시키는 정수라고 한다. 그런데 주어진 부등호 관계를 만족하는 정수는 하나 이상 존재한다. 예를 들어 3456128790 뿐만 아니라 5689023174도 아래와 같이 부등호 관계 A를 만족시킨다. 
5 < 6 < 8 < 9 > 0 < 2 < 3 > 1 < 7 > 4
여러분은 제시된 k개의 부등호 순서를 만족하는 (k+1)자리의 정수 중에서 최댓값과 최솟값을 찾아야 한다. 앞서 설명한 대로 각 부등호의 앞뒤에 들어가는 숫자는 { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }중에서 선택해야 하며 선택된 숫자는 모두 달라야 한다.

# 입력
> 첫 줄에 부등호 문자의 개수를 나타내는 정수 k가 주어진다. 그 다음 줄에는 k개의 부등호 기호가 하나의 공백을 두고 한 줄에 모두 제시된다. k의 범위는 2 ≤ k ≤ 9 이다.

# 출력
> 여러분은 제시된 부등호 관계를 만족하는 k+1 자리의 최대, 최소 정수를 첫째 줄과 둘째 줄에 각각 출력해야 한다. 단 아래 예(1)과 같이 첫 자리가 0인 경우도 정수에 포함되어야 한다. 모든 입력에 답은 항상 존재하며 출력 정수는 하나의 문자열이 되도록 해야 한다.

# 풀이
순열을 이용해서 모든 조합을 만들어내고 부등호를 만족하는지 검사했다. stoi를 썼다가 out of range 오류가 떠서  stoll로 바꾸니 k의 값이 9일때의 예제에서도 답을 잘 출력했고 정답 처리를 받을 수 있었다.

# 코드
```c++
#include <iostream>
#include <string>
#include <limits>
#include <algorithm>
#include <vector>

using namespace std;

int K;

string min_answer;

string max_answer;

bool Check(vector<char> op, string s)
{
	for (int i = 0; i < s.size() - 1; i++)
	{
		char c = op[i];

		int left = s[i] - '0';
		int right = s[i + 1] - '0';

		switch (c)
		{
		case '<' :
			if (left > right)
				return false;
			break;
		case '>' :
			if (left < right)
				return false;
			break;
		}
	}

	return true;
}

int main()
{
	vector<char> op;
	cin >> K;

	for (int i = 0; i < K; i++)
	{
		char c;

		cin >> c;

		op.emplace_back(c);
	}

	vector<bool> select;

	for (int i = 0; i < 10; i++)
	{
		select.emplace_back(false);
	}

	for (int i = 0; i <= K; i++)
	{
		select[i] = true;
	}

	sort(select.begin(), select.end());

	do
	{
		string s;

		for (int i = 0; i < select.size(); i++)
		{
			if (select[i])
			{
				s += i + '0';
			}
		}

		sort(s.begin(), s.end());

		do
		{
			if (Check(op, s))
			{
				if (min_answer.empty())
					min_answer = s;

				if (max_answer.empty())
					max_answer = s;

				if (stoll(max_answer) < stoll(s))
					max_answer = s;

				if (stoll(min_answer) > stoll(s))
					min_answer = s;
			}

		} while (next_permutation(s.begin(), s.end()));


	} while (next_permutation(select.begin(), select.end()));


	cout << max_answer << "\n";
	cout << min_answer << "\n";

	return 0;
}
```