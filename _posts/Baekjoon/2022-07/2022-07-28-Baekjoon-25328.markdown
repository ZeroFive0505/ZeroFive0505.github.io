---
layout: post
title: 문자열 집합 조합하기
date: 2022-07-28 07:07:01 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/25328)
# 문자열 집합 조합하기

# 문제
> 알파벳 소문자로 구성된 문자열 X, Y, Z가 주어진다. 각각의 문자열에는 중복된 문자가 존재하지 않는다. 문자열 S에 있는 문자 중 임의로 k개를 선택하여 문자열 S에서의 순서를 유지하여 만든 모든 부분 문자열을 모아 놓은 집합을 문자열 S에 대한 조합 C(S, k)라고 하자. 예를 들어, 문자열 S = 'abc'에 대한 조합 C(S, 2) = {'ab', 'ac', 'bc'}이다. 입력으로 문자열 X, Y, Z와 정수 k가 주어질 때 C(X, k), C(Y, k), C(Z, k)에 두 번 이상 나타나는 부분 문자열을 오름차순으로 출력하자.

# 입력
> 첫 번째 줄에 문자열 X가 주어진다.
두 번째 줄에 문자열 Y가 주어진다.
세 번째 줄에 문자열 Z가 주어진다.
네 번째 줄에 정수 k가 주어진다.

# 출력
> C(X, k), C(Y, k), C(Z, k)에 두 번 이상 나타나는 부분 문자열을 오름차순으로 출력한다. 한 줄에 하나의 부분 문자열을 출력한다. 두 번 이상 나타나는 부분 문자열이 없으면 -1을 출력한다.

# 풀이
k개의 문자열을 고르는 조합 함수를 통해 모든 조합의 경우의 수를 구한뒤 map에 넣는다. map은 자동으로 정렬이 되어서 간단하게 순회하면서 총 등장 횟수가 2 이상이면 출력한다.

# 코드
```c++
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

map<string, int> hashCount;

void Combination(string s, vector<char> c, int k, int index, int depth)
{
    // k 개를 다 골랐을 시
	if (k == 0)
	{
		string t;

		for (int i = 0; i < c.size(); i++)
		{
			t += c[i];
		}

		hashCount[t]++;

		return;
	}

    // 만약 끝에 도달했다면
	if (depth == s.size())
		return;

	c[index] = s[depth];
    // 현재 문자열 선택
	Combination(s, c, k - 1, index + 1, depth + 1);
    // 선택 하지 않았을 경우
	Combination(s, c, k, index, depth + 1);
}

int main()
{
	string x, y, z;
	int k;

	cin >> x;
	cin >> y;
	cin >> z;

	cin >> k;

	vector<char> c;
	c.resize(k);

	Combination(x, c, k, 0, 0);
	Combination(y, c, k, 0, 0);
	Combination(z, c, k, 0, 0);

	bool found = false;

	for (auto it = hashCount.begin(); it != hashCount.end(); it++)
	{
		if (it->second >= 2)
		{
			cout << it->first << "\n";
			found = true;
		}
	}

	if (!found)
		cout << -1 << "\n";

	return 0;
}
```