---
layout: post
title: 로마 숫자 만들기
date: 2022-07-26 08:26:03 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/16922)
# 로마 숫자 만들기

# 문제
> 로마 숫자에서는 수를 나타내기 위해서 I, V, X, L을 사용한다. 각 문자는 1, 5, 10, 50을 의미하고, 이 문제에서 다른 문자는 사용하지 않는다.
하나 또는 그 이상의 문자를 이용해서 수를 나타낼 수 있다. 문자열이 나타내는 값은, 각 문자가 의미하는 수를 모두 합한 값이다. 예를 들어, XXXV는 35, IXI는 12를 의미한다.
실제 로마 숫자에서는 문자의 순서가 중요하지만, 이 문제에서는 순서는 신경쓰지 않는다. 예를 들어, 실제 로마 숫자에서 IX는 9를 의미하지만, 이 문제에서는 11을 의미한다.
로마 숫자를 N개 사용해서 만들 수 있는 서로 다른 수의 개수를 구해보자.

# 입력
> 첫째 줄에 사용할 수 있는 문자의 개수 N (1 ≤ N ≤ 20)이 주어진다.

# 출력
> 첫째 줄에 로마 숫자 N개를 사용해서 만들 수 있는 서로 다른 수의 개수를 출력한다.

# 풀이
처음에는 DFS를 이용해서 풀어서 예제 출력도 잘 나오길래 제출했지만 시간 초과가 떴다. N의 범위가 너무커서 재귀호출로는 너무 오래걸려서 반복문을 이용해서 풀었다. 맨 처음 초기값으로 1, 5, 10, 50의 값을 집어넣고 N번 반복하면서 1, 5, 10, 50에 각각 1, 5, 10, 50을 더해서 숫자가 N개 있을경우 만들어낼 수 있는 숫자의 경우의 수를 계산한다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <set>

using namespace std;

int N;
set<int> s;
vector<int> v;

int num[4] = { 1, 5, 10, 50 };

int main()
{
	cin >> N;

	v.emplace_back(1);
	v.emplace_back(5);
	v.emplace_back(10);
	v.emplace_back(50);

	for (int i = 0; i < v.size(); i++)
	{
		s.insert(v[i]);
	}

    // N은 1번부터 반복해서 1일 경우 반복문을 무시
	for (int i = 1; i < N; i++)
	{
        // 반복문 안에 들어왔다는 것은 N은 2이상의 숫자가 입력됬다는 뜻
		vector<int> temp;
        // 현제 셋에는 N의 1일 경우의 가능한 숫자의 갯수가 들어있다. 따라서 한번 비운다.
		s.clear();

        // 현재 v의 들어있는 숫자의 갯수만큼 반복한다.
		for (int j = 0; j < v.size(); j++)
		{
            // 1, 5, 10, 50 4개의 숫자를 더해준다.
			for (int k = 0; k < 4; k++)
			{
				int result = v[j] + num[k];
                
                // 만약 셋에서 찾을 수 없다면 새로운 숫자
				if (s.find(result) == s.end())
				{
					s.insert(result);
					temp.emplace_back(result);
				}
			}
		}

        // 끝나면 v를 비워주고 새롭게 갱신한다.
		v.clear();
		v = temp;
	}

	cout << s.size() << "\n";


	return 0;
}
```