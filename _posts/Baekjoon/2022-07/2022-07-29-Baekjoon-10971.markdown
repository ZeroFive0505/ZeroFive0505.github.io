---
layout: post
title: 외판원 순회 2
date: 2022-07-29 08:26:30 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/10971)
# 외판원 순회 2

# 문제
> 외판원 순회 문제는 영어로 Traveling Salesman problem (TSP) 라고 불리는 문제로 computer science 분야에서 가장 중요하게 취급되는 문제 중 하나이다. 여러 가지 변종 문제가 있으나, 여기서는 가장 일반적인 형태의 문제를 살펴보자.
1번부터 N번까지 번호가 매겨져 있는 도시들이 있고, 도시들 사이에는 길이 있다. (길이 없을 수도 있다) 이제 한 외판원이 어느 한 도시에서 출발해 N개의 도시를 모두 거쳐 다시 원래의 도시로 돌아오는 순회 여행 경로를 계획하려고 한다. 단, 한 번 갔던 도시로는 다시 갈 수 없다. (맨 마지막에 여행을 출발했던 도시로 돌아오는 것은 예외) 이런 여행 경로는 여러 가지가 있을 수 있는데, 가장 적은 비용을 들이는 여행 계획을 세우고자 한다.
각 도시간에 이동하는데 드는 비용은 행렬 W[i][j]형태로 주어진다. W[i][j]는 도시 i에서 도시 j로 가기 위한 비용을 나타낸다. 비용은 대칭적이지 않다. 즉, W[i][j] 는 W[j][i]와 다를 수 있다. 모든 도시간의 비용은 양의 정수이다. W[i][i]는 항상 0이다. 경우에 따라서 도시 i에서 도시 j로 갈 수 없는 경우도 있으며 이럴 경우 W[i][j]=0이라고 하자.
N과 비용 행렬이 주어졌을 때, 가장 적은 비용을 들이는 외판원의 순회 여행 경로를 구하는 프로그램을 작성하시오.

# 입력
> 첫째 줄에 도시의 수 N이 주어진다. (2 ≤ N ≤ 10) 다음 N개의 줄에는 비용 행렬이 주어진다. 각 행렬의 성분은 1,000,000 이하의 양의 정수이며, 갈 수 없는 경우는 0이 주어진다. W[i][j]는 도시 i에서 j로 가기 위한 비용을 나타낸다.
항상 순회할 수 있는 경우만 입력으로 주어진다.

# 출력
> 첫째 줄에 외판원의 순회에 필요한 최소 비용을 출력한다.

# 풀이
W[i][j]가 0인 경우를 고려했어야 했다. 이걸 걸러내지 않아서 계속 40%에서 오답 처리가 됬었다. N의 범위는 순열을 이용하기에 큰 무리가 없어서 순열을 이용하고 TSP를 시행할때 마지막에 시작 노드의 번호를 넣어서 함수를 호출 하는 형식으로 했다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int INF = 987654321;

long long ans = INF;

int N;

int W[10][10] = {};

vector<int> nodes;

long long TSP(vector<int>& visit)
{
	int from = visit[0];
	long long dist = 0;

	for (int i = 1; i < visit.size(); i++)
	{
		int to = visit[i];

		if (W[from][to] != 0)
		{
			dist += W[from][to];
			from = to;
		}
        // 만약 도중에 더이상 가지 못한다면 바로 반환
		else if (W[from][to] == 0)
			return -1;
	}

    // 시작 지점으로 돌아올 수 있었다면 거리를 반환
	if (from == visit[0])
		return dist;
	else
		return -1;
}

int main()
{
	cin >> N;

	for (int i = 0; i < N; i++)
	{
		nodes.emplace_back(i);
	}

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> W[i][j];
		}
	}

	sort(nodes.begin(), nodes.end());

	do
	{
		vector<int> visit = nodes;
        
        // 마지막 노드는 항상 시작 노드
		visit.emplace_back(nodes[0]);

        // TSP 시작
		long long ret = TSP(visit);

		if (ret != -1)
			ans = min(ret, ans);

	} while (next_permutation(nodes.begin(), nodes.end()));

	cout << ans << "\n";


	return 0;
}
```