---
layout: post
title: 연산자 끼워넣기
date: 2021-09-14 10:59:29 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/14888)
# 연산자 끼워넣기

# 문제
> N개의 수로 이루어진 수열 A1, A2, ..., AN이 주어진다. 또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.
우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 이때, 주어진 수의 순서를 바꾸면 안 된다.  
예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 예를 들어, 아래와 같은 식을 만들 수 있다.

> - 1+2+3-4×5÷6
> - 1÷2+3+4-5×6
> - 1+2÷3×4-5+6
> - 1÷2×3-4+5+6

> 식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.

> - 1+2+3-4×5÷6 = 1
> - 1÷2+3+4-5×6 = 12
> - 1+2÷3×4-5+6 = 5
> - 1÷2×3-4+5+6 = 7

> N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.

# 입력
> 첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 둘째 줄에는 A1, A2, ..., AN이 주어진다. (1 ≤ Ai ≤ 100) 셋째 줄에는 합이 N-1인 4개의 정수가 주어지는데, 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다. 

# 출력
> 첫째 줄에 만들 수 있는 식의 결과의 최댓값을, 둘째 줄에는 최솟값을 출력한다. 연산자를 어떻게 끼워넣어도 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다. 또한, 앞에서부터 계산했을 때, 중간에 계산되는 식의 결과도 항상 -10억보다 크거나 같고, 10억보다 작거나 같다.

# 풀이
백트랙킹을 이용해서 풀 수 있었다. 하나 주의할점은 숫자 초기값은 입력된 숫자의 가장 처음 값을 넘겨줘야하며 DFS최대 깊이 또한 -1을 해줘서 범위가 넘지 않게 한다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int INF = 987654321;

int minAnswer = INF;
int maxAnswer = -INF;


int N;

int arr[4];

void DFS(vector<int>& v, int depth, int num)
{
	if (depth == N - 1)
	{
		minAnswer = min(minAnswer, num);
		maxAnswer = max(maxAnswer, num);

		return;
	}

	if (arr[0] > 0)
	{
		arr[0]--;
		DFS(v, depth + 1, num + v[depth + 1]);
		arr[0]++;
	}

	if (arr[1] > 0)
	{
		arr[1]--;
		DFS(v, depth + 1, num - v[depth + 1]);
		arr[1]++;
	}

	if (arr[2] > 0)
	{
		arr[2]--;
		DFS(v, depth + 1, num * v[depth + 1]);
		arr[2]++;
	}

	if (arr[3] > 0)
	{
		arr[3]--;
		DFS(v, depth + 1, num / v[depth + 1]);
		arr[3]++;
	}
}

int main()
{
	cin >> N;

	vector<int> v(N, 0);

	for (int i = 0; i < N; i++)
	{
		cin >> v[i];
	}

	for (int i = 0; i < 4; i++)
	{
		cin >> arr[i];
	}

	DFS(v, 0, v[0]);

	cout << maxAnswer << "\n";
	cout << minAnswer << "\n";

	return 0;
}
```