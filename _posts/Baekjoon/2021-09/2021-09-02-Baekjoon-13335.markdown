---
layout: post
title: 트럭
date: 2021-09-02 09:30:33 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/13335)
# 트럭

# 문제
> 강을 가로지르는 하나의 차선으로 된 다리가 하나 있다. 이 다리를 n 개의 트럭이 건너가려고 한다. 트럭의 순서는 바꿀 수 없으며, 트럭의 무게는 서로 같지 않을 수 있다. 다리 위에는 단지 w 대의 트럭만 동시에 올라갈 수 있다. 다리의 길이는 w 단위길이(unit distance)이며, 각 트럭들은 하나의 단위시간(unit time)에 하나의 단위길이만큼만 이동할 수 있다고 가정한다. 동시에 다리 위에 올라가 있는 트럭들의 무게의 합은 다리의 최대하중인 L보다 작거나 같아야 한다. 참고로, 다리 위에 완전히 올라가지 못한 트럭의 무게는 다리 위의 트럭들의 무게의 합을 계산할 때 포함하지 않는다고 가정한다. 예를 들어, 다리의 길이 w는 2, 다리의 최대하중 L은 10, 다리를 건너려는 트럭이 트럭의 무게가 [7, 4, 5, 6]인 순서대로 다리를 오른쪽에서 왼쪽으로 건넌다고 하자. 이 경우 모든 트럭이 다리를 건너는 최단시간은 아래의 그림에서 보는 것과 같이 8 이다.


![Img](https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/13335/1.png)


> 다리의 길이와 다리의 최대하중, 그리고 다리를 건너려는 트럭들의 무게가 순서대로 주어졌을 때, 모든 트럭이 다리를 건너는 최단시간을 구하는 프로그램을 작성하라.

# 입력
> 입력 데이터는 표준입력을 사용한다. 입력은 두 줄로 이루어진다. 입력의 첫 번째 줄에는 세 개의 정수 n (1 ≤ n ≤ 1,000) , w (1 ≤ w ≤ 100) and L (10 ≤ L ≤ 1,000)이 주어지는데, n은 다리를 건너는 트럭의 수, w는 다리의 길이, 그리고 L은 다리의 최대하중을 나타낸다. 입력의 두 번째 줄에는 n개의 정수 a1, a2, ⋯ , an (1 ≤ ai ≤ 10)가 주어지는데, ai는 i번째 트럭의 무게를 나타낸다.

# 출력
> 출력은 표준출력을 사용한다. 모든 트럭들이 다리를 건너는 최단시간을 출력하라.

# 풀이
트럭이 대기하는 큐와 트럭이 다리위에 있을때의 리스트를 따로 준비한다. 다리에 하중이 된다고해서 트럭이 한번에 다 올라가는 것이 아니고 시간이 지나면서 하나씩 차근차근 늘려가며 다리위에 대기하는 트럭들은 순회하면서 시간을 늘려준다. 그리고 만약 시간이 충분히 지났다면 리스트에서 트럭을 하나빼고 그때 큐가 비어있지 않다면 리스트에 새롭게 트럭을 추가해준다.

# 풀이
```c++
#include <iostream>
#include <list>
#include <queue>

const int SIZE = 1001;


using namespace std;

int N, W, L;

int main()
{
	cin >> N >> W >> L;
	queue<pair<int, int>> q;
	list<pair<int, int>> trucks;
	for (int i = 0; i < N; i++)
	{
		int w;

		cin >> w;
		q.push({ w, 0 });
	}

	int nTime = 0;

	while (1)
	{
		if (!q.empty())
		{
			pair<int, int> t = q.front();

			if (L >= t.first)
			{
				L -= t.first;
				q.pop();
				trucks.push_back(t);
			}
		}

		if (!trucks.empty() && trucks.front().second >= W)
		{
			L += trucks.front().first;
			trucks.pop_front();

			if (!q.empty() && L >= q.front().first)
			{
				pair<int, int> t = q.front();
				L -= t.first;
				trucks.push_back(t);
				q.pop();
			}
		}

		for (auto& kv : trucks)
			kv.second++;

		nTime++;

		if (q.empty() && trucks.empty())
			break;

	}


	cout << nTime << "\n";

	return 0;
}
```