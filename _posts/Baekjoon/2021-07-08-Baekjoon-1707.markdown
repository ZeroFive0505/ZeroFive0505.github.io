---
layout: post
title: 이분 그래프
date: 2021-07-08 10:35:24 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/1707)
# 이분 그래프

# 문제
> 그래프의 정점의 집합을 둘로 분할하여, 각 집합에 속한 정점끼리는 서로 인접하지 않도록 분할할 수 있을 때, 그러한 그래프를 특별히 이분 그래프 (Bipartite Graph) 라 부른다. 그래프가 입력으로 주어졌을 때, 이 그래프가 이분 그래프인지 아닌지 판별하는 프로그램을 작성하시오.

# 입력
> 입력은 여러 개의 테스트 케이스로 구성되어 있는데, 첫째 줄에 테스트 케이스의 개수 K(2≤K≤5)가 주어진다. 각 테스트 케이스의 첫째 줄에는 그래프의 정점의 개수 V(1≤V≤20,000)와 간선의 개수 E(1≤E≤200,000)가 빈 칸을 사이에 두고 순서대로 주어진다. 각 정점에는 1부터 V까지 차례로 번호가 붙어 있다. 이어서 둘째 줄부터 E개의 줄에 걸쳐 간선에 대한 정보가 주어지는데, 각 줄에 인접한 두 정점의 번호가 빈 칸을 사이에 두고 주어진다.

# 출력
> K개의 줄에 걸쳐 입력으로 주어진 그래프가 이분 그래프이면 YES, 아니면 NO를 순서대로 출력한다.

# 코드
```c++
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

bool Coloring(vector<vector<int>>& graph, int src, vector<int>& colors)
{

	colors[src] = 1;

	queue<int> q;
	q.push(src);

	while (!q.empty())
	{
		int u = q.front();
		q.pop();

		for (int i = 0; i < graph[u].size(); i++)
		{
			if (graph[u][i] == u)
				return false;
		}

		for (int i = 0; i < graph[u].size(); i++)
		{
			if (colors[graph[u][i]] == -1)
			{
                // 그래프의 색깔은 0 또는 1이 된다.
				colors[graph[u][i]] = 1 - colors[u];
				q.push(graph[u][i]);
			}
			else if (colors[u] == colors[graph[u][i]])
				return false;
		}
	}

	return true;
}

bool IsBiPartite(vector<vector<int>>& graph)
{
	vector<int> colors(graph.size(), -1);

	for (int i = 1; i < graph.size(); i++)
	{
		if (colors[i] == -1)
		{
			if (!Coloring(graph, i, colors))
				return false;
		}
	}

	return true;
}

int main()
{
	int K, V, E;

	cin >> K;

	while (K--)
	{
		cin >> V >> E;

		vector<vector<int>> graph(V + 1);

		for (int i = 0; i < E; i++)
		{
			int u, v;
			cin >> u >> v;

			graph[u].push_back(v);
			graph[v].push_back(u);
		}



		if (IsBiPartite(graph))
			cout << "YES\n";
		else
			cout << "NO\n";
	}
	return 0;
}
```

# 풀이
오랜만에 잊어버린 이분 그래프 감지 알고리즘을 상기시킬 수 있는 문제였다...