---
layout: post
title: 도미노 찾기
date: 2022-08-02 09:07:30 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/1553)
# 도미노 찾기

# 문제
> ![Img](https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/upload/201004/do.png)

> 도미노의 크기는 1×2이고, 크기가 1×1인 칸으로 나누어져 있다. 칸은 수를 나타내며, 위와 같이 총 28가지가 있다.
크기가 8×7인 격자가 있고, 격자의 각 칸에는 정수가 하나씩 들어있다. 위의 도미노를 이용해 문제의 격자와 같은 상태를 만드는 방법의 수를 구해보자.
격자의 칸에 적힌 수는 도미노의 칸이 의미하는 수와 같아야 한다. 도미노는 회전할 수 있으며, 같은 도미노를 여러 번 사용하면 안된다.

# 입력
> 총 8개의 줄에 격자의 상태가 주어진다. 격자에는 0부터 6까지의 수만 존재한다.

# 출력
> 첫째 줄에 경우의 수를 출력한다.

# 풀이
처음에는 28가지의 도미노의 경우의 수를 벡터에 저장해놓고 그걸 총 4번 돌리는 것으로 다 채울 수 있는지를 확인하는 방법으로 했는데 좀 처럼 예제 입력에 대해서 올바른 답을 출력하지를 못했고 인터넷에서 [이 곳](https://latte-is-horse.tistory.com/331)을 참조해서 문제를 풀 수 있었다. 도미노의 관리를 2차원 배열로 해서 코드도 내가 했던 것보다 훨씬 깔끔했고 보기 좋았다. 왼쪽 상단에서 채워나가면서 오른쪽 또는 아래쪽으로 행과 열을 바꿔가면서 채워가다가 만약 행이 R과 같다면 모든 도미노를 채웠다는 뜻이며 1을 반환한다.

# 코드
```c++
#include <iostream>
#include <string>
#include <vector>

using namespace std;

const int R = 8;
const int C = 7;

int arr[R][C] = {};
bool visited[R][C] = {};

// 0, 0 ~ 6, 6 도미노의 사용결과
bool used[7][7] = {};

// 항상 오른쪽 아니면 아래쪽을 채워나간다.
struct sDelta
{
	int r;
	int c;
}Delta[] = {
	{0, 1},
	{1, 0}
};

int DFS(int r, int c)
{
    // 만약 모든 행을 채웠다면
	if (r == R)
		return 1;

	int count = 0;

    // 일단 열을 한칸 옮긴다.
	int nr = r;
	int nc = c + 1;

    // 만약 모든 열을 다 채웠다면 행을 이동한다.
	if (nc == C)
	{
		nr = r + 1;
		nc = 0;
	}

    // 이미 도미노를 채운곳이라면 바로 다음 장소로 이동
	if (visited[r][c])
		return DFS(nr, nc);

    // 백트랙킹 시작
	int a = arr[r][c];
	visited[r][c] = true;

    // 오른쪽, 아래 이동경우를 계산
	for (int i = 0; i < 2; i++)
	{
		int move_r = r + Delta[i].r;
		int move_c = c + Delta[i].c;

        // 만약 범위 내이면서
		if (move_r < R && move_c < C)
		{
			int b = arr[move_r][move_c];

            // 도미노를 채우지 않았고 사용하지 않은 도미노라면
			if (!visited[move_r][move_c] && !used[a][b])
			{   
                // 만약 3, 5 도미노라면 180도 회전할 경우 5, 3 도미노가 되고 같은 도미노이므로 사용 처리
				used[a][b] = true;
				used[b][a] = true;
				visited[move_r][move_c] = true;
                
				count += DFS(nr, nc);

				visited[move_r][move_c] = false;
				used[a][b] = false;
				used[b][a] = false;
			}
		}
	}

	visited[r][c] = false;
	return count;
}

int main()
{
	for (int i = 0; i < 8; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < 7; j++)
		{
			arr[i][j] = s[j] - '0';
		}
	}

	int ans = DFS(0, 0);

	cout << ans << "\n";

	return 0;
}
```