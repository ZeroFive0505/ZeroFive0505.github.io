---
layout: post
title: 애너그램
date: 2022-08-04 09:23:04 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/6443)
# 애너그램

# 문제
> 씬디는 애너그램(anagram) 프로그램을 만들어 줄 수 있는 남자를 좋아한다. 참고로 씬디는 매우 예쁘다.
애너그램 프로그램이란, 입력받은 영단어의 철자들로 만들 수 있는 모든 단어를 출력하는 것이다. 가령 "abc" 를 입력받았다면, "abc", "acb", "bac", "bca", "cab", "cba" 를 출력해야 한다.
입력받은 단어내에 몇몇 철자가 중복될 수 있다. 이 경우 같은 단어가 여러 번 만들어 질 수 있는데, 한 번만 출력해야 한다.  또한 출력할 때에 알파벳 순서로 출력해야 한다.

# 입력
> 첫째 줄에 단어의 개수 N 이, 둘째 줄부터 N개의 영단어가 들어온다. 영단어는 소문자로 이루어져 있다. 단어의 길이는 20보다 작거나 같고, 애너그램의 수가 100,000개 이하인 단어만 입력으로 주어진다.

# 출력
> N개의 영단어에 대한 모든 가능한 애너그램을 출력한다. 각각의 영단어에 대한 애너그램을 출력할 때, 알파벳 순서로 중복되지 않게 출력한다.

# 풀이
일반적인 DFS를 이용하니 시간 초과가 떴는데 인터넷을 참조해본 결과 중복되는 문자열간의 이동을 최소화하는 식으로 풀어야 시간 초과없이 정답 판정을 받을 수 있었다.

# 코드
```c++
#include <iostream>
#include <algorithm>

using namespace std;

const int MAX = 21;

bool used[MAX] = {};

int length;

void DFS(int depth, string s)
{
	if (depth >= length)
	{
		cout << s << "\n";
		return;
	}

    // depth부터 시작
	for (int i = depth; i < s.size(); i++)
	{
        // 만약 인덱스위 위치는 다르지만 문자는 같을 경우 그냥 스킵
		if (i != depth && s[i] == s[depth])
			continue;

        // 다른 문자일경우만 교체
		if (s[i] != s[depth])
			swap(s[i], s[depth]);
		DFS(depth + 1, s);
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int N;

	cin >> N;

	for (int i = 0; i < N; i++)
	{
		string s;

		cin >> s;

		length = s.size();

		sort(s.begin(), s.end());

		DFS(0, s);
	}

	return 0;
}
```