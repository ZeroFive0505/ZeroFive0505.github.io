---
layout: post
title: 너구리 구구
date: 2022-08-04 10:02:38 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/18126)
# 너구리 구구

# 문제
> 텔레토비 동산에 사는 너구리 구구는 입구, 거실, 주방, 안방, 공부방, 운동실, 음악실, 음식 창고 등 N개의 방을 가지고 있다. 입구를 포함한 모든 방은 1부터 N까지의 번호가 있고, 입구는 1번이다.  구구의 집으로 들어가는 입구는 한 개이며 입구과 모든 방들은 총 N-1개의 길로 서로 오고 갈 수 있다.
구구는 스머프 동산에서 멜론아 아이스크림을 발견했다. 구구는 무더운 여름 햇살을 피해 최대한 입구에서 먼 방에 아이스크림을 숨기려고 한다.
구구가 집 입구에서 멜론아 아이스크림을 숨기려고 하는 방까지 이동하는 거리를 구하여라.

# 입력
> 첫째 줄에 정수 N(1 ≤ N ≤ 5,000)이 주어진다.
다음 N-1개의 줄에 구구의 집의 모든 길의 정보가 정수 A, B, C(1 ≤ A, B ≤ N, 1 ≤ C ≤ 1,000,000,000)로 주어진다.
A번 방과 B번 방 사이를 양방향으로 연결하는 길의 길이가 C임을 의미한다.

# 출력
> 구구가 집 입구에서 멜론아 아이스크림을 숨기려고 하는 방까지 이동하는 거리를 구하여라.

# 풀이
DFS로 풀었는데 BFS로도 충분히 풀릴 것 같은 문제, 계속 방문하지 않은 곳을 방문하고 만약 현재 위치가 입구가 아니라면 거리의 최대치를 갱신한다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <stack>

using namespace std;

int N;

const int MAX = 5005;

vector<pair<int, long long>> graph[MAX];
bool visited[MAX] = {};

int main()
{
	cin >> N;

	for (int i = 0; i < N - 1; i++)
	{
		int A, B;
		long long C;

		cin >> A >> B;
		cin >> C;
		graph[A].push_back({ B, C });
		graph[B].push_back({ A, C });
	}

	stack<pair<int, long long>> st;

	st.push({ 1, 0 });

	visited[1] = true;
	
	long long ans = 0;

	while (!st.empty())
	{
		pair<int, long long> t = st.top();
		st.pop();

		if (t.first != 1)
			ans = max(ans, t.second);

		for (pair<int, long long> to : graph[t.first])
		{
			if (!visited[to.first])
			{
				visited[to.first] = true;
				st.push({ to.first, t.second + to.second });
			}
		}
	}

	cout << ans << "\n";

	return 0;
}
```