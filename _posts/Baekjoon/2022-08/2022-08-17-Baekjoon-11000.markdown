---
layout: post
title: 강의실 배정
date: 2022-08-17 09:11:04 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/11000)
# 강의실 배정

# 문제
> 수강신청의 마스터 김종혜 선생님에게 새로운 과제가 주어졌다. 
김종혜 선생님한테는 Si에 시작해서 Ti에 끝나는 N개의 수업이 주어지는데, 최소의 강의실을 사용해서 모든 수업을 가능하게 해야 한다. 
참고로, 수업이 끝난 직후에 다음 수업을 시작할 수 있다. (즉, Ti ≤ Sj 일 경우 i 수업과 j 수업은 같이 들을 수 있다.)
수강신청 대충한 게 찔리면, 선생님을 도와드리자!

# 입력
> 첫 번째 줄에 N이 주어진다. (1 ≤ N ≤ 200,000)
이후 N개의 줄에 Si, Ti가 주어진다. (0 ≤ Si < Ti ≤ 109)

# 출력
> 강의실의 개수를 출력하라.

# 풀이
회의실 배정문제와 유사했지만 다른 문제였다. 회의실 배정 문제의 풀이 방법으로 접근해봤지만 오답처리를 받았고 인터넷을 참조해본 결과 우선순위 큐를 이용해서 풀어야 한다는 것을 알 수 있었다. 정렬을 하는 것부터 약간 다른데 시작 시간 기준으로 오름차순으로 정렬하고 거기서 가장 처음 강의의 끝나는 시간을 우선순위 큐에 넣는다. 그리고 반복하면서 우선순위 큐에 넣고 만약 현재 우선순위 큐에 가장 위에 있는 요소가 다음 강의의 시작시간 보다 작거나 같다면 하나의 강의실에서 계속 이어서 할 수 있다는 뜻이 되며 따라서 큐에서 하나를 꺼낸다. 
최종적으로 큐의 크기를 출력하면 정답이 된다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int n;

int main()
{
	int n;
	cin >> n;

	vector<pair<int, int>> v;

	for (int i = 0; i < n; i++)
	{
		int s, t;

		cin >> s >> t;

		v.push_back({ s, t });
	}

	sort(v.begin(), v.end());

	priority_queue<int, vector<int>, greater<int>> pq;

	pq.push(v.front().second);

	for (int i = 1; i < v.size(); i++)
	{
		pq.push(v[i].second);

		if (pq.top() <= v[i].first)
			pq.pop();
	}

	cout << pq.size() << "\n";


	return 0;
}
```