---
layout: post
title: 단풍잎 이야기
date: 2022-08-25 08:17:15 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/16457)
# 단풍잎 이야기

# 문제
> 리유나와 라가는 메이플스토리라는 노동을 즐겨 한다. 메이플스토리에서는 키셋팅을 할 수 있는데, 키셋팅을 하면 원하는 키를 눌러서 원하는 스킬을 쓰게 할 수 있다.
리유나와 라가는 원래 좋은 친구였다. 리유나는 레벨이 225인데, 라가는 레벨이 202밖에 되지 않는다. 라가는 리유나를 질투해서 메이플 레벨을 따라잡으려고 했다. 그래서 리유나가 메이플을 하지 못하도록 키보드에 있는 키를 n개만 빼고 모두 망가뜨려버렸다!
하지만 리유나는 메이플에 이미 인생을 팔아버렸기 때문에, 키가 망가져도 일간 퀘스트를 계속해야만 했다! 그래서 2n개의 스킬들 중에서 n개를 적절히 키에 배치해서 어떻게든 일간 퀘스트를 해야만 했다!
일간 퀘스트는 다음과 같이 진행된다. m개의 퀘스트들이 주어진다. 각각의 퀘스트에서는 k개의 스킬을 사용해야 한다. 만약 스킬을 사용할 수 없다면 그 퀘스트는 수행할 수 없다고 본다.
리유나는 n개의 키에 스킬들을 배치하려고 한다. 실제 게임에서는 키셋팅을 마음대로 할 수 있고, 키셋팅을 하지 않아도 더블 클릭으로 스킬을 사용할 수 있지만, 여기서는 키셋팅을 한번 설정하면 그 날은 키셋팅을 다시 바꿀 수 없고 더블 클릭으로 스킬을 사용할 수 없다고 가정하다. 이 때 어떤 스킬들을 배치해야 가장 많은 양의 일간 퀘스트를 깰 수 있는지 구하여자.

# 입력
> 첫째 줄에 키의 개수 n, 퀘스트의 개수 m, 퀘스트 당 사용해야 하는 스킬의 수 k가 주어진다. n은 10 이하, k는 n 이하의 양의 정수이며, m은 100 이하의 양의 정수이다.
둘째 줄부터 m개의 줄에는 각각의 퀘스트에서 사용해야 하는 스킬들이 나온다. 스킬들의 이름은 1에서 2n까지의 정수로 주어진다.

# 출력
> 첫째 줄에 가장 최적의 키배치를 했을 때 최대로 깰 수 있는 퀘스트의 개수를 출력한다.

# 풀이
처음에는 순열로 풀어봤는데 17%에서 시간초과가 떴고 역시 최대 깊이가 2n까지라서 순열이 아닌 조합이 더 알맞은 문제였다. 현재 이 스킬을 선택, 또는 선택하지 않고 넘어가는 방식으로 모든 조합을 고려해서 문제를 풀 수가 있었다.

# 코드
```c++
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 101;

int n, m, k;

int ans = 0;

vector<int> arr[MAX];

vector<int> skills;

bool used[21] = {};

void DFS(int depth, int cnt)
{
    // 만약 깊이가 2n을 넘어가거나, 선택한 스킬이 n이상이라면
	if (depth > n * 2 || cnt >= n)
	{
		int cnt = 0;

        // 현재 조합으로 클리어 가능한 모든 퀘스트의 갯수를 센다.
		for (int i = 1; i <= m; i++)
		{
			int match = 0;

			for (int j = 0; j < skills.size(); j++)
			{
				int s = skills[j];

                // 1이라면 필요한 스킬
				if (arr[i][s] == 1)
					match++;
			}

            // 만약 매칭된 갯수가 k라면 이 퀘스트는 클리어 가능하다.
			if (match == k)
				cnt++;
		}

		ans = max(ans, cnt);

		return;
	}


	if (!used[depth])
	{
		used[depth] = true;
		skills.push_back(depth);
		DFS(depth + 1, cnt + 1);
		skills.pop_back();
		used[depth] = false;
	}

	DFS(depth + 1, cnt);
}

int main()
{
	cin >> n >> m >> k;
    
    // m개의 퀘스트에서 필요한 스킬 기록
	for (int i = 1; i <= m; i++)
	{
        // 크기를 최대 2n만큼 미리 잡아둔다.
		arr[i].resize(2 * n + 1);
		for (int j = 0; j < k; j++)
		{
			int num;
            
            // i번 퀘스트에서 num 스킬이 필요하다고 체크
			cin >> num;
			arr[i][num] = 1;
		}
	}

	DFS(1, 0);

	cout << ans << "\n";

	return 0;
}
```