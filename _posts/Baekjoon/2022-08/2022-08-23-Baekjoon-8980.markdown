---
layout: post
title: 택배
date: 2022-08-23 09:21:59 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/8980)
# 택배

# 문제
> 아래 그림과 같이 직선 도로상에 왼쪽부터 오른쪽으로 1번부터 차례대로 번호가 붙여진 마을들이 있다. 마을에 있는 물건을 배송하기 위한 트럭 한 대가 있고, 트럭이 있는 본부는 1번 마을 왼쪽에 있다. 이 트럭은 본부에서 출발하여 1번 마을부터 마지막 마을까지 오른쪽으로 가면서 마을에 있는 물건을 배송한다. 

![Img](https://upload.acmicpc.net/bfa825aa-3abf-4012-96bf-55af2f76fb26/-/preview/)

> 각 마을은 배송할 물건들을 박스에 넣어 보내며, 본부에서는 박스를 보내는 마을번호, 박스를 받는 마을번호와 보낼 박스의 개수를 알고 있다. 박스들은 모두 크기가 같다. 트럭에 최대로 실을 수 있는 박스의 개수, 즉 트럭의 용량이 있다. 이 트럭 한대를 이용하여 다음의 조건을 모두 만족하면서 최대한 많은 박스들을 배송하려고 한다.

> - 조건 1: 박스를 트럭에 실으면, 이 박스는 받는 마을에서만 내린다.
> - 조건 2: 트럭은 지나온 마을로 되돌아가지 않는다.
> - 조건 3: 박스들 중 일부만 배송할 수도 있다.

> ...(링크 참조)

# 입력
> 입력의 첫 줄은 마을 수 N과 트럭의 용량 C가 빈칸을 사이에 두고 주어진다. N은 2이상 2,000이하 정수이고, C는 1이상 10,000이하 정수이다. 다음 줄에, 보내는 박스 정보의 개수 M이 주어진다. M은 1이상 10,000이하 정수이다. 다음 M개의 각 줄에 박스를 보내는 마을번호, 박스를 받는 마을번호, 보내는 박스 개수(1이상 10,000이하 정수)를 나타내는 양의 정수가 빈칸을 사이에 두고 주어진다. 박스를 받는 마을번호는 보내는 마을번호보다 크다.

# 출력
> 트럭 한 대로 배송할 수 있는 최대 박스 수를 한 줄에 출력한다.

# 풀이
어떻게 풀어야 할 지 감이 오질 안 와서 인터넷에서 [이 곳](https://jaimemin.tistory.com/764)의 풀이를 참조해서 풀 수 있었다.

# 코드
```c++
#include <iostream>
#include <algorithm>

using namespace std;

struct sInfo
{
	int from;
	int to;
	int weight;
};

int N, C, M;

// 현재 인덱스 위치에서 최대 적재량
int capacity[2005];

sInfo arr[10001];

int main()
{
	cin >> N >> C >> M;

	for (int i = 0; i < M; i++)
	{
		sInfo info;

		cin >> info.from >> info.to >> info.weight;

		arr[i] = info;
	}

    // 목적지를 오름차순으로 만약 목적지가 같다면 시작 위치를 기준으로 오름차 순으로 정렬한다.
	sort(arr, arr + M, [](const sInfo& a, const sInfo& b) {
		if (a.to != b.to)
			return a.to < b.to;
		else if (a.to == b.to)
			return a.from < b.from;
	});

	int ans = 0;

	for (int i = 0; i < M; i++)
	{
		int box = 0;

        // 현재 구간에서 최대 적재치를 구한다.
		for (int j = arr[i].from; j < arr[i].to; j++)
			box = max(box, capacity[j]);

        // 가용량을 구한다.
		int avail_space = min(arr[i].weight, C - box);

        // 가용량 만큼 정답에 더해준다.
		ans += avail_space;

        // 구간에 가용량 만큼 더해준다.
		for (int j = arr[i].from; j < arr[i].to; j++)
			capacity[j] += avail_space;
	}

	cout << ans << "\n";

	return 0;
}
```