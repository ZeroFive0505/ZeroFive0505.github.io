---
layout: post
title: 양치기 꿍
date: 2022-08-01 11:39:17 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/3187)
# 양치기 꿍

# 문제
> 양치기 꿍은 맨날 늑대가 나타났다고 마을 사람들을 속였지만 이젠 더이상 마을 사람들이 속지 않는다. 화가 난 꿍은 복수심에 불타 아예 늑대들을 양들이 있는 울타리안에 마구 집어넣어 양들을 잡아먹게 했다.
하지만 양들은 보통 양들이 아니다. 같은 울타리 영역 안의 양들의 숫자가 늑대의 숫자보다 더 많을 경우 늑대가 전부 잡아먹힌다. 물론 그 외의 경우는 양이 전부 잡아먹히겠지만 말이다.
꿍은 워낙 똑똑했기 때문에 이들의 결과는 이미 알고있다. 만약 빈 공간을 '.'(점)으로 나타내고 울타리를 '#', 늑대를 'v', 양을 'k'라고 나타낸다면 여러분은 몇 마리의 양과 늑대가 살아남을지 계산할 수 있겠는가?
단, 울타리로 막히지 않은 영역에는 양과 늑대가 없으며 양과 늑대는 대각선으로 이동할 수 없다.

# 입력
> 입력의 첫 번째 줄에는 각각 영역의 세로와 가로의 길이를 나타내는 두 개의 정수 R, C (3 ≤ R, C ≤ 250)가 주어진다.
다음 각 R줄에는 C개의 문자가 주어지며 이들은 위에서 설명한 기호들이다.

# 출력
> 살아남게 되는 양과 늑대의 수를 각각 순서대로 출력한다.

# 풀이
너비나 깊이 우선 탐색으로 양과 늑대의 수를 세서 더 많은 쪽을 누적시킨다.

# 코드
```c++
#include <iostream>
#include <queue>
using namespace std;

const int MAX = 255;

char arr[MAX][MAX] = {};

bool visited[MAX][MAX] = {};

int R, C;

struct sDelta
{
	int r;
	int c;
}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

int total_sheep = 0;
int total_wolf = 0;

void BFS(int r, int c)
{
	int sheep_cnt = 0;
	int wolf_cnt = 0;

	queue<pair<int, int>> q;
	q.push({ r, c });
	visited[r][c] = true;

	if (arr[r][c] == 'k')
		sheep_cnt++;
	if (arr[r][c] == 'v')
		wolf_cnt++;

	while (!q.empty())
	{
		pair<int, int> t = q.front();
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nr = t.first + Delta[i].r;
			int nc = t.second + Delta[i].c;

			if (nr >= 0 && nc >= 0 && nr < R && nc < C)
			{
				if (!visited[nr][nc])
				{
					if (arr[nr][nc] == '.')
					{
						visited[nr][nc] = true;
						q.push({ nr, nc });
					}
					else if (arr[nr][nc] == 'v')
					{
						visited[nr][nc] = true;
						q.push({ nr, nc });
						wolf_cnt++;
					}
					else if (arr[nr][nc] == 'k')
					{
						visited[nr][nc] = true;
						q.push({ nr, nc });
						sheep_cnt++;
					}
				}
			}
		}
	}

	if (wolf_cnt < sheep_cnt)
		total_sheep += sheep_cnt;
	else
		total_wolf += wolf_cnt;
}

int main()
{
	cin >> R >> C;

	for (int i = 0; i < R; i++)
	{
		for (int j = 0; j < C; j++)
		{
			cin >> arr[i][j];
		}
	}

	for (int i = 0; i < R; i++)
	{
		for (int j = 0; j < C; j++)
		{
			if (arr[i][j] == '#')
				continue;

			if (!visited[i][j])
			{
				BFS(i, j);
			}
		}
	}

	cout << total_sheep << " " << total_wolf << "\n";

	return 0;
}
```