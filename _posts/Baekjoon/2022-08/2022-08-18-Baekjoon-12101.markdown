---
layout: post
title: 1, 2, 3 더하기 2
date: 2022-08-18 08:04:44 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/12101)
# 1, 2, 3 더하기 2

# 문제
> 정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 7가지가 있다. 합을 나타낼 때는 수를 1개 이상 사용해야 한다.
> - 1+1+1+1
> - 1+1+2
> - 1+2+1
> - 2+1+1
> - 2+2
> - 1+3
> - 3+1

> 이를 사전순으로 정렬하면 다음과 같이 된다.
> 1. 1+1+1+1
> 2. 1+1+2
> 3. 1+2+1
> 4. 1+3
> 5. 2+1+1
> 6. 2+2
> 7. 3+1

> 정수 n과 k가 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법 중에서 k번째로 오는 식을 구하는 프로그램을 작성하시오.

# 입력
> 첫째 줄에 정수 n과 k가 주어진다. n은 양수이며 11보다 작고, k는 2<sup>31-1</sup>보다 작거나 같은 자연수이다.

# 출력
> n을 1, 2, 3의 합으로 나타내는 방법 중에서 사전 순으로 k번째에 오는 것을 출력한다. k번째 오는 식이 없는 경우에는 -1을 출력한다.

# 풀이
1, 2, 3 더하기에서 살짝 응용해서 풀 수 있었다. DP로 1 ~ 11까지의 1, 2, 3 합의 경우의 수를 미리 구해놓는다. 문제에서 k번째 식이 없는 경우는 경우의 수가 k보다 작을 경우다. 따라서 바로 -1을 출력하고 아닐 경우 반복문으로 1, 2, 3씩 더해가면서 합이 n이 될 경우 갯수를 세서 정확히 k번째가 될 경우 출력한다.

# 코드
```c++
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int n, k;

int cnt = 0;

int tabs[12] = {};

string s;

void DFS(int depth, int sum)
{
	if (sum == n)
	{
		cnt++;

		if (cnt == k)
		{
            // 마지막 +를 그냥 빼버리고 출력
			s.pop_back();
			cout << s << "\n";
			exit(0);
		}

		return;
	}

	if (sum > n)
		return;

	for (int i = 1; i <= 3; i++)
	{
		s.push_back(i + '0');
		s.push_back('+');
		DFS(depth + 1, sum + i);
		s.pop_back();
		s.pop_back();
	}
}

int main()
{
	cin >> n >> k;

    // 합1 가능한 경우의 수
	tabs[1] = 1;
    // 합2 가능한 경우의 수
	tabs[2] = 2;
    // 합3 가능한 경우의 수
	tabs[3] = 4;

    // DP로 먼저 갯수를 구한다.
	for (int i = 4; i < 12; i++)
	{
		tabs[i] += tabs[i - 1] + tabs[i - 2] + tabs[i - 3];
	}

    // 만약 k가 범위 내라면 풀 수 있다.
	if (tabs[n] >= k)
		DFS(0, 0);
	else
		cout << -1 << "\n";

	return 0;
}
```