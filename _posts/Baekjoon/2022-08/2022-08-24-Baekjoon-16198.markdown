---
layout: post
title: 에너지 모으기
date: 2022-08-24 07:54:29 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/16198)
# 에너지 모으기

# 문제
> N개의 에너지 구슬이 일렬로 놓여져 있고, 에너지 구슬을 이용해서 에너지를 모으려고 한다.
i번째 에너지 구슬의 무게는 Wi이고, 에너지를 모으는 방법은 다음과 같으며, 반복해서 사용할 수 있다.
> 1. 에너지 구슬 하나를 고른다. 고른 에너지 구슬의 번호를 x라고 한다. 단, 첫 번째와 마지막 에너지 구슬은 고를 수 없다.
> 2. x번째 에너지 구슬을 제거한다.
> 2. Wx-1 × Wx+1의 에너지를 모을 수 있다.
> 3. N을 1 감소시키고, 에너지 구슬을 1번부터 N번까지로 다시 번호를 매긴다. 번호는 첫 구슬이 1번, 다음 구슬이 2번, ... 과 같이 매겨야 한다.
> N과 에너지 구슬의 무게가 주어졌을 때, 모을 수 있는 에너지 양의 최댓값을 구하는 프로그램을 작성하시오.

# 입력
> 첫째 줄에 에너지 구슬의 개수 N(3 ≤ N ≤ 10)이 주어진다.
둘째 줄에는 에너지 구슬의 무게 W1, W2, ..., WN을 공백으로 구분해 주어진다. (1 ≤ Wi ≤ 1,000)

# 출력
> 첫째 줄에 모을 수 있는 에너지의 최댓값을 출력한다.

# 풀이
첫 시도에서는 매 순간 가장 최대치를 만들어서 반환하는 식으로 풀었는데 오답 판정을 받았다. 지금은 최대치가 아니더라도 마지막에는 가장 최대치가 될 수 있다는 생각이 들었고 순열을 이용해서 첫번째와 마지막번째를 제외한 모든 경우의 수를 고려해서 풀어봤지만 1%에서 오답처리를 받고 인터넷에서 [이 곳](https://yabmoons.tistory.com/67)의 풀이를 보고 풀 수 있었다.

# 코드
```c++
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int N;

int ans = 0;

int temp = 0;

vector<int> arr;

void DFS()
{  
    // 크기가 2이하라면 끝
	if (arr.size() <= 2)
	{
		ans = max(ans, temp);
		return;
	}

    // 가장 처음 원소부터 마지막 전 원소까지 반복
	for (int i = 1; i < arr.size() - 1; i++)
	{
		int e = arr[i];
		temp += arr[i - 1] * arr[i + 1];
        // i번째를 선택헀으니 삭제한다.
		arr.erase(arr.begin() + i);
		DFS();
        // 다시 돌아오면서 i번째에 삽입
		arr.insert(arr.begin() + i, e);
		temp -= arr[i - 1] * arr[i + 1];
	}
}

int main()
{
	cin >> N;
	arr.resize(N);

	for (int i = 0; i < N; i++)
	{
		cin >> arr[i];
	}

	DFS();

	cout << ans << "\n";

	return 0;
}
```