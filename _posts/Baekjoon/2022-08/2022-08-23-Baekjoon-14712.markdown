---
layout: post
title: 넴모넴모 (Easy)
date: 2022-08-23 08:35:09 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/14712)
# 넴모넴모 (Easy)

# 문제
> 네모는 뿌××× 게임에 깊은 감명을 받아, 직사각형 모양의 격자판과 “넴모”라는 수수께끼의 생물을 이용하는 “넴모넴모”라는 게임을 만들었다. 이 게임의 규칙은 아주 간단하다. 격자판의 비어 있는 칸을 임의로 골라 “넴모”를 하나 올려놓거나, “넴모”가 올라간 칸 네 개가 2 × 2 사각형을 이루는 부분을 찾아 그 위에 있는 “넴모”들을 모두 없애는 것을 질릴 때까지 반복하면 된다.

![img](https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14700/1.png)

> 하지만 안타깝게도 게임은 정말 재미가 없었고, 네모는 아주 빨리 질려 버리고 말았다. 실망한 네모는 게임을 적당히 플레이하다가, “넴모”를 없애고 싶은데 격자판 위에 없앨 수 있는 “넴모”가 없으면 게임을 그만두기로 했다. 네모가 게임을 그만두었을 때 나올 수 있는 “넴모”의 배치의 가짓수를 구하여라.

# 입력
> 첫 번째 줄에 격자판의 행의 개수 N, 열의 개수 M(1 ≤ N, M ≤ 25, 1 ≤ N × M ≤ 25)이 공백으로 구분되어 주어진다.

# 출력
> 첫 번째 줄에 주어진 격자판에서 나올 수 있는, “넴모”들이 올라간 칸이 2 × 2 사각형을 이루지 않는 모든 배치의 가짓수를 출력한다.

# 풀이
백트랙킹을 이용한 조합으로 풀 수 있었는데 백트랙킹이 끝나는 기저조건은 행이 범위를 넘어가는 경우로 설정하고 현재 위치에 배치할지 안 할지의 여부를 정한다. 만약 현재 행이 범위를 넘어가면 배치를 끝냈다고 판단하고 조건을 만족하는지를 판단한다. 백트랙킹 조건이나 분기가 좀 감이 안 와서 [이 곳](https://velog.io/@silver_star/%EB%B0%B1%EC%A4%80-14712-%EB%84%B4%EB%AA%A8%EB%84%B4%EB%AA%A8-Easy-Backtracking-Brute-Force)을 참조하였다.

# 코드
```c++
#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 26;

int N, M;

int cnt = 0;

int board[MAX][MAX] = {};

void DFS(int r, int c)
{
	if (r >= N)
	{
		for (int i = 0; i <= N - 2; i++)
		{
			for (int j = 0; j <= M - 2; j++)
			{
				if (board[i][j] && board[i][j + 1] && board[i + 1][j] && board[i + 1][j + 1])
					return;
			}
		}

		cnt++;
		return;
	}

    // 다음 행과 열을 구한다.
    // 먼저 열의 경우 1을 더했을때 만약 범위를 넘어가게 되면 0부터 다시시작
	int nc = (c + 1 == M) ? 0 : c + 1;
    // 만약 새로운 열이 0부터 시작한다면 새로운 행이 됬다는 예기
	int nr = (nc == 0) ? r + 1 : r;

	board[r][c] = 1;
	DFS(nr, nc);

	board[r][c] = 0;
	DFS(nr, nc);
}

int main()
{
	cin >> N >> M;
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	DFS(0, 0);

	cout << cnt << "\n";

	return 0;
}
```