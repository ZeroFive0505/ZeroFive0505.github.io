---
layout: post
title: 멀티탭 스케줄링
date: 2022-08-22 09:51:19 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/1700)
# 멀티탭 스케줄링

# 문제
> 기숙사에서 살고 있는 준규는 한 개의 멀티탭을 이용하고 있다. 준규는 키보드, 헤어드라이기, 핸드폰 충전기, 디지털 카메라 충전기 등 여러 개의 전기용품을 사용하면서 어쩔 수 없이 각종 전기용품의 플러그를 뺐다 꽂았다 하는 불편함을 겪고 있다. 그래서 준규는 자신의 생활 패턴을 분석하여, 자기가 사용하고 있는 전기용품의 사용순서를 알아내었고, 이를 기반으로 플러그를 빼는 횟수를 최소화하는 방법을 고안하여 보다 쾌적한 생활환경을 만들려고 한다.
예를 들어 3 구(구멍이 세 개 달린) 멀티탭을 쓸 때, 전기용품의 사용 순서가 아래와 같이 주어진다면, 
> 1. 키보드
> 2. 헤어드라이기
> 3. 핸드폰 충전기
> 4. 디지털 카메라 충전기
> 5. 키보드
> 6. 헤어드라이기

> 키보드, 헤어드라이기, 핸드폰 충전기의 플러그를 순서대로 멀티탭에 꽂은 다음 디지털 카메라 충전기 플러그를 꽂기 전에 핸드폰충전기 플러그를 빼는 것이 최적일 것이므로 플러그는 한 번만 빼면 된다. 

# 입력
> 첫 줄에는 멀티탭 구멍의 개수 N (1 ≤ N ≤ 100)과 전기 용품의 총 사용횟수 K (1 ≤ K ≤ 100)가 정수로 주어진다. 두 번째 줄에는 전기용품의 이름이 K 이하의 자연수로 사용 순서대로 주어진다. 각 줄의 모든 정수 사이는 공백문자로 구분되어 있다. 

# 출력
> 하나씩 플러그를 빼는 최소의 횟수를 출력하시오. 

# 풀이
처음에는 만약 현재 탭이 꽉 찼다면 앞으로 스케줄에서 가장 안 쓰는 것을 뽑는 방식으로 풀었는데 약 27%에서 오답처리가 나왔다. 맵과 리스트 등 너무 코드도 난잡한 것 같아 다른 사람들의 풀이를 참조하였고 [이 곳](https://jaimemin.tistory.com/759)의 풀이를 참조하였다. 한번도 안 쓰이는 것뿐만 아니라 가장 나중에 쓰이는 것도 고려를 해야했었다.

# 코드
```c++
#include <iostream>
#include <algorithm>

using namespace std;

const int MAX = 101;

int N, K;

int schedule[MAX], tab[MAX];

int main()
{
	cin >> N >> K;

	for (int i = 0; i < K; i++)
		cin >> schedule[i];

	int count = 0;

	for (int i = 0; i < K; i++)
	{
		bool plug = false;

        // 만약 이미 꽂혀있는 거라면 
		for (int j = 0; j < N; j++)
		{
			if (tab[j] == schedule[i])
			{
				plug = true;
				break;
			}
		}

        // 스킵
		if (plug)
			continue;


        // 만약 비어있는 곳이 있다면
		for (int j = 0; j < N; j++)
		{
			if (!tab[j])
			{
				tab[j] = schedule[i];
				plug = true;
				break;
			}
		}

        // 꽂고 스킵
		if (plug)
			continue;

        // 한번도 안 쓰이거나, 가장 나중에 쓰이는 기기의 인덱스를 찾는다.
		int index, device_index = -1;

		for (int j = 0; j < N; j++)
		{
			int last_index = 0;

            // 앞으로의 스케줄을 확인
			for (int k = i + 1; k < K; k++)
			{
                // 만약 같다면 빠져나온다.
				if (tab[j] == schedule[k])
					break;

                // 마지막 인덱스는 가장 나중에 쓰이거나 한번도 쓰이지 않을 경우 이 값은 커진다.
				last_index++;
			}

            // 인덱스 갱신
			if (last_index > device_index)
			{
				index = j;
				device_index = last_index;
			}
		}

        // 교체
		count++;
		tab[index] = schedule[i];
	}

	cout << count << "\n";

	return 0;
}
```