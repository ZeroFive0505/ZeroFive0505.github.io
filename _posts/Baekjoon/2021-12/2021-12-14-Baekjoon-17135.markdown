---
layout: post
title: 캐슬 디펜스
date: 2021-12-14 14:17:53 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/17135)
# 캐슬 디펜스

# 문제
> 캐슬 디펜스는 성을 향해 몰려오는 적을 잡는 턴 방식의 게임이다. 게임이 진행되는 곳은 크기가 N×M인 격자판으로 나타낼 수 있다. 격자판은 1×1 크기의 칸으로 나누어져 있고, 각 칸에 포함된 적의 수는 최대 하나이다. 격자판의 N번행의 바로 아래(N+1번 행)의 모든 칸에는 성이 있다.
성을 적에게서 지키기 위해 궁수 3명을 배치하려고 한다. 궁수는 성이 있는 칸에 배치할 수 있고, 하나의 칸에는 최대 1명의 궁수만 있을 수 있다. 각각의 턴마다 궁수는 적 하나를 공격할 수 있고, 모든 궁수는 동시에 공격한다. 궁수가 공격하는 적은 거리가 D이하인 적 중에서 가장 가까운 적이고, 그러한 적이 여럿일 경우에는 가장 왼쪽에 있는 적을 공격한다. 같은 적이 여러 궁수에게 공격당할 수 있다. 공격받은 적은 게임에서 제외된다. 궁수의 공격이 끝나면, 적이 이동한다. 적은 아래로 한 칸 이동하며, 성이 있는 칸으로 이동한 경우에는 게임에서 제외된다. 모든 적이 격자판에서 제외되면 게임이 끝난다. 
게임 설명에서 보다시피 궁수를 배치한 이후의 게임 진행은 정해져있다. 따라서, 이 게임은 궁수의 위치가 중요하다. 격자판의 상태가 주어졌을 때, 궁수의 공격으로 제거할 수 있는 적의 최대 수를 계산해보자.
격자판의 두 위치 (r1, c1), (r2, c2)의 거리는 |r1-r2| + |c1-c2|이다.

# 입력
> 첫째 줄에 격자판 행의 수 N, 열의 수 M, 궁수의 공격 거리 제한 D가 주어진다. 둘째 줄부터 N개의 줄에는 격자판의 상태가 주어진다. 0은 빈 칸, 1은 적이 있는 칸이다.

# 출력
> 첫째 줄에 궁수의 공격으로 제거할 수 있는 적의 최대 수를 출력한다.

# 풀이
문제를 제대로 안 읽어서 궁수를 N X M 배열에 위치시키는줄 알았는데 N + 1, 즉 성이 있는 위치에만 3명의 궁수가 배치가 가능한 조건이 있었다. 백트랙킹으로 모든 경우의 수를 구한다음 최댓값을 찾으면된다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 17;

int N, M, D;

int arr[MAX][MAX] = { };

int enemies = 0;

int ans = 0;

vector<pair<int, int>> v;

void DFS(int depth)
{
	if (depth == 3)
	{
		int tempArr[MAX][MAX] = {};
		int num = enemies;

		for (int i = 0; i < N + 1; i++)
		{
			for (int j = 0; j < M; j++)
			{
				tempArr[i][j] = arr[i][j];
			}
		}


		int cnt = 0;

		while (num)
		{
			vector<pair<int, pair<int, int>>> dists[3];

			for (int i = 0; i < N; i++)
			{
				for (int j = 0; j < M; j++)
				{
					if (tempArr[i][j] == 1)
					{
						for (int k = 0; k < v.size(); k++)
						{
							int r = v[k].first;
							int c = v[k].second;

							int dist = abs(i - r) + abs(j - c);

							if(dist <= D)
								dists[k].push_back({ dist, {i, j} });
						}
					}
				}
			}

			for (int i = 0; i < 3; i++)
			{
				sort(dists[i].begin(), dists[i].end(), [](const pair<int, pair<int, int>>& a, const pair<int, pair<int, int>>& b)
				{
					if (a.first != b.first)
						return a.first < b.first;
					else
						return a.second.second < b.second.second;
				});
			}


			for (int i = 0; i < 3; i++)
			{
				if (!dists[i].empty() &&tempArr[dists[i][0].second.first][dists[i][0].second.second] == 1)
				{
					cnt++;
					num--;
					tempArr[dists[i][0].second.first][dists[i][0].second.second] = 0;
				}
			}

			for (int i = N - 1; i >= 0; i--)
			{
				for (int j = 0; j < M; j++)
				{
					if (tempArr[i][j] == 1)
					{
						tempArr[i][j] = 0;

						if (i + 1 < N)
							tempArr[i + 1][j] = 1;
						else
							num--;
					}
				}
			}
		}

		ans = max(ans, cnt);

		return;
	}


	for (int i = N; i < N + 1; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (arr[i][j] == 0)
			{
				arr[i][j] = 2;
				v.push_back({ i, j });
				DFS(depth + 1);
				arr[i][j] = 0;
				v.pop_back();
			}
		}
	}
}

int main()
{

	cin >> N >> M >> D;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cin >> arr[i][j];

			if (arr[i][j] == 1)
				enemies++;
		}
	}

	DFS(0);

	cout << ans << "\n";

	return 0;
}
```