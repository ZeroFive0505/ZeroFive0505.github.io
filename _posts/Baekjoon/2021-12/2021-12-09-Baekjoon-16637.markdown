---
layout: post
title: 괄호 추가하기
date: 2021-12-09 08:32:26 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/16637)
# 괄호 추가하기

# 문제
> 길이가 N인 수식이 있다. 수식은 0보다 크거나 같고, 9보다 작거나 같은 정수와 연산자(+, -, ×)로 이루어져 있다. 연산자 우선순위는 모두 동일하기 때문에, 수식을 계산할 때는 왼쪽에서부터 순서대로 계산해야 한다. 예를 들어, 3+8×7-9×2의 결과는 136이다.
수식에 괄호를 추가하면, 괄호 안에 들어있는 식은 먼저 계산해야 한다. 단, 괄호 안에는 연산자가 하나만 들어 있어야 한다. 예를 들어, 3+8×7-9×2에 괄호를 3+(8×7)-(9×2)와 같이 추가했으면, 식의 결과는 41이 된다. 하지만, 중첩된 괄호는 사용할 수 없다. 즉, 3+((8×7)-9)×2, 3+((8×7)-(9×2))은 모두 괄호 안에 괄호가 있기 때문에, 올바른 식이 아니다.
수식이 주어졌을 때, 괄호를 적절히 추가해 만들 수 있는 식의 결과의 최댓값을 구하는 프로그램을 작성하시오. 추가하는 괄호 개수의 제한은 없으며, 추가하지 않아도 된다.

# 입력
> 첫째 줄에 수식의 길이 N(1 ≤ N ≤ 19)가 주어진다. 둘째 줄에는 수식이 주어진다. 수식에 포함된 정수는 모두 0보다 크거나 같고, 9보다 작거나 같다. 문자열은 정수로 시작하고, 연산자와 정수가 번갈아가면서 나온다. 연산자는 +, -, * 중 하나이다. 여기서 *는 곱하기 연산을 나타내는 × 연산이다. 항상 올바른 수식만 주어지기 때문에, N은 홀수이다.

# 출력
> 첫째 줄에 괄호를 적절히 추가해서 얻을 수 있는 결과의 최댓값을 출력한다. 정답은 2^31보다 작고, -2^31보다 크다.

# 풀이
순열을 이용해서 연산자를 기준으로 덩어리를 만들어서 그걸 붙이는 순서에 따라서 풀어보려 했지만 이럴 경우 중복되는 숫자가 생겨서 문제였다. 결국 [이 곳](https://jaimemin.tistory.com/1454)을 참조하여 문제를 풀었다.

# 코드
```c++
#include <iostream>
#include <string>
#include <algorithm>
#include <climits>

using namespace std;

int N;

string s;

int ans = INT_MIN;

int Calculate(int num1, int num2, char op)
{
	int ret = 0;
	switch (op)
	{
	case '+':
		ret = num1 + num2;
		break;
	case '-':
		ret = num1 - num2;
		break;
	case '*':
		ret = num1 * num2;
		break;
	}

	return ret;
}

void DFS(int depth, int num)
{   
    // 만약 끝에 도달했으면 갱신하고 반환
	if (depth >= N)
	{
		ans = max(num, ans);

		return;
	}
    
    // 여기서 현재 깊이에 따라 연산자가 정해진다.
    // 가장처음에는 깊이가 0이다 따라서 자동으로 +가 되며
    // temp에는 0 + 식에 가장 처음에 있는 숫자가 더해질 것이다.
	char op = depth >= 1 ? s[depth - 1] : '+';
	int temp = Calculate(num, s[depth] - '0', op);

    // 괄호를 묶지않고 그냥 계산할 경우
	DFS(depth + 2, temp);

    // 괄호를 묶어서 계산할 경우
	if (depth < N - 2)
	{
        // 다음 숫자를 계산한다.
		temp = Calculate(s[depth] - '0', s[depth + 2] - '0', s[depth + 1]);
        // 그 결과값을 현재 값과 연산자로 계산한다.
		temp = Calculate(num, temp, op);

		DFS(depth + 4, temp);
	}
}

int main()
{
	cin >> N;
	cin >> s;

    // 가장 처음에는 0을 초기값으로 전달해준다.
	DFS(0, 0);

	cout << ans << "\n";

	return 0;
}
```