---
layout: post
title: 마법사 상어와 파이어스톰
date: 2021-12-08 07:58:23 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/20058)
# 마법사 상어와 파이어스톰

# 풀이
회전을 어떻게 해야할지 전혀 감이 오질 안 와서 [이 곳](https://yabmoons.tistory.com/602)을 참조하여 풀었다.

# 코드
```c++
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

const int MAX = 65;

int N, Q;
int sum = 0;
int maxSize = 0;
int arr[MAX][MAX] = {};
bool visited[MAX][MAX] = {};

struct sPos
{
	int r;
	int c;
}Delta[] = {
	{0, 1},
	{0, -1},
	{1, 0},
	{-1, 0}
};


vector<int> cmd;

// 좌표 (a, b)에서 부터 회전을 시작한다.
void Rotate(int a, int b, int len)
{
    // 전체 정사각형의 길이를 2로 나눠 전체 몇개의 사각형 태두리를 회전시켜야 하는지 구한다.
	int squareLen = len / 2;

	for (int n = 0; n < squareLen; n++)
	{
        // 전체 정사각형 안에 부분 사각형의 시작위치와 끝나는 위치를 구한다.
		int startR = a + n;
		int startC = b + n;
		int endR = a + len - n - 1;
		int endC = b + len - n - 1;

		int rIdx = endR;
		int cIdx = startC;
		int idx = 0;
		vector<int> temp;

        // 먼저 사각형 태두리의 왼쪽 행을 따로 저장한다.
		for (int i = startR; i < endR; i++)
			temp.push_back(arr[i][startC]);

        // 사각형 태두리 왼쪽 행에 아래 열의 값을 집어넣는다.
		for (int i = startR; i < endR; i++)
			arr[i][startC] = arr[endR][cIdx++];

        // 사각형 태두리 아래 열에 오른쪽 행의 값을 집어넣는다.
		for (int i = startC; i < endC; i++)
			arr[endR][i] = arr[rIdx--][endC];

        // 사각형 태두리 오른쪽 행에 위쪽 열의 값을 집어넣는다.
		for (int i = endR; i > startR; i--)
			arr[i][endC] = arr[startR][cIdx--];

        // 마지막으로 위쪽 열에 저장해두었던 왼쪽 행을 집어넣는다.
		for (int i = endC; i > startC; i--)
			arr[startR][i] = temp[idx++];
	}
}

void Melt()
{
	vector<pair<int, int>> v;

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (arr[i][j] == 0)
				continue;

			int cnt = 0;

            // 4방향으로 갯수를 센다.
			for (int k = 0; k < 4; k++)
			{
				int nr = i + Delta[k].r;
				int nc = j + Delta[k].c;

				if (nr < 0 || nc < 0 || nr >= N || nc >= N)
					continue;

                // 만약 얼음이 아니여도 건너뛴다.
				if (arr[nr][nc] == 0)
					continue;

				cnt++;
			}

			if (cnt < 3)
				v.push_back({ i, j });
		}
	}

    // 주변의 얼음의 갯수가 3개 아래인 얼음들을 순회하면서 숫자를 줄인다.
	for (int i = 0; i < v.size(); i++)
	{
		int r = v[i].first;
		int c = v[i].second;

		arr[r][c]--;
		sum--;
	}
}

// len만큼 건너뛰면서 사각형을 회전시킨다.
void ArrangeArr(int len)
{
	for (int i = 0; i < N; i += len)
	{
		for (int j = 0; j < N; j += len)
		{
			Rotate(i, j, len);
		}
	}
}

int BFS(int r, int c)
{
	int cnt = 1;

	queue<pair<int, int>> q;

	q.push({ r, c });

	visited[r][c] = true;

	while (!q.empty())
	{
		pair<int, int> cur = q.front();
		int cr = cur.first;
		int cc = cur.second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nr = cr + Delta[i].r;
			int nc = cc + Delta[i].c;

			if (nr < 0 || nc < 0 || nr >= N || nc >= N)
				continue;
			if (visited[nr][nc] || arr[nr][nc] <= 0)
				continue;

			q.push({ nr, nc });
			visited[nr][nc] = true;
			cnt++;
		}
	}

	return cnt;
}


int main()
{
	cin >> N >> Q;

	N = (1 << N);

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> arr[i][j];
			sum += arr[i][j];
		}
	}

	for (int i = 0; i < Q; i++)
	{
		int L;
		cin >> L;
		cmd.push_back(L);
	}

	for (int i = 0; i < Q; i++)
	{
		int L = (1 << cmd[i]);

		ArrangeArr(L);
		Melt();
	}

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (arr[i][j] == 0 || visited[i][j])
				continue;

			int result = BFS(i, j);

			maxSize = max(maxSize, result);
		}
	}

	cout << sum << "\n";
	cout << maxSize << "\n";

	return 0;
}
```