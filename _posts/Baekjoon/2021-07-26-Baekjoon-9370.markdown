---
layout: post
title: 미확인 도착지
date: 2021-07-26 11:02:29 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/9370)
# 미확인 도착지

# 문제
> (취익)B100 요원, 요란한 옷차림을 한 서커스 예술가 한 쌍이 한 도시의 거리들을 이동하고 있다. 너의 임무는 그들이 어디로 가고 있는지 알아내는 것이다. 우리가 알아낸 것은 그들이 s지점에서 출발했다는 것, 그리고 목적지 후보들 중 하나가 그들의 목적지라는 것이다. 그들이 급한 상황이기 때문에 목적지까지 우회하지 않고 최단거리로 갈 것이라 확신한다. 이상이다. (취익) 어휴! (요란한 옷차림을 했을지도 모를) 듀오가 어디에도 보이지 않는다. 다행히도 당신은 후각이 개만큼 뛰어나다. 이 후각으로 그들이 g와 h 교차로 사이에 있는 도로를 지나갔다는 것을 알아냈다. 이 듀오는 대체 어디로 가고 있는 것일까?

![Img](https://www.acmicpc.net/upload/images/destination.png)

> 예제 입력의 두 번째 케이스를 시각화한 것이다. 이 듀오는 회색 원에서 두 검은 원 중 하나로 가고 있고 점선으로 표시된 도로에서 냄새를 맡았다. 따라서 그들은 6으로 향하고 있다.

# 입력
> 첫 번째 줄에는 테스트 케이스의 T(1 ≤ T ≤ 100)가 주어진다. 각 테스트 케이스마다
> 1. 첫 번째 줄에 3개의 정수 n, m, t (2 ≤ n ≤ 2 000, 1 ≤ m ≤ 50 000 and 1 ≤ t ≤ 100)가 주어진다. 각각 교차로, 도로, 목적지 후보의 개수이다.
> 2. 두 번째 줄에 3개의 정수 s, g, h (1 ≤ s, g, h ≤ n)가 주어진다. s는 예술가들의 출발지이고, g, h는 문제 설명에 나와 있다. (g ≠ h)
> 3. 그 다음 m개의 각 줄마다 3개의 정수 a, b, d (1 ≤ a < b ≤ n and 1 ≤ d ≤ 1 000)가 주어진다. a와 b 사이에 길이 d의 양방향 도로가 있다는 뜻이다.
> 4. 그 다음 t개의 각 줄마다 정수 x가 주어지는데, t개의 목적지 후보들을 의미한다. 이 t개의 지점들은 서로 다른 위치이며 모두 s와 같지 않다.
교차로 사이에는 도로가 많아봐야 1개이다. m개의 줄 중에서 g와 h 사이의 도로를 나타낸 것이 존재한다. 또한 이 도로는 목적지 후보들 중 적어도 1개로 향하는 최단 경로의 일부이다.

# 출력
테스트 케이스마다 입력에서 주어진 목적지 후보들 중 불가능한 경우들을 제외한 목적지들을 공백으로 분리시킨 오름차순의 정수들로 출력한다.

# 코드
```c++
#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>

using namespace std;

const int SIZE = 2001;

const int INF = 987654321;

int SOURCE[SIZE];
int G[SIZE];
int H[SIZE];

int T;

int n, m, t;

int s, g, h;

vector<pair<int, int>> graph[SIZE];
vector<int> destinations;

void Dijkstra(int start, int dist[SIZE])
{
	priority_queue<pair<int, int>> pq;
	pq.push({ 0, start });

	dist[start] = 0;

	while (!pq.empty())
	{
		pair<int, int> current = pq.top();
		pq.pop();

		int u = current.second;
		int w = -current.first;

		for (int v = 0; v < graph[u].size(); v++)
		{
			int neighbor = graph[u][v].first;
			int cost = graph[u][v].second;

			if (dist[neighbor] > cost + w)
			{
				dist[neighbor] = cost + w;
				pq.push({ -dist[neighbor], neighbor });
			}
		}
	}
}

int main()
{
	cin >> T;

	while (T--)
	{
		for (int i = 0; i < SIZE; i++)
		{
			graph[i].clear();
			SOURCE[i] = INF;
			G[i] = INF;
			H[i] = INF;
		}

		destinations.clear();

		cin >> n >> m >> t;
		cin >> s >> g >> h;

		for (int i = 0; i < m; i++)
		{
			int u, v, w;
			cin >> u >> v >> w;

			graph[u].push_back({ v, w });
			graph[v].push_back({ u, w });
		}

		for (int i = 0; i < t; i++)
		{
			int v;
			cin >> v;
			destinations.push_back(v);
		}

		Dijkstra(s, SOURCE);
		Dijkstra(g, G);
		Dijkstra(h, H);

		sort(destinations.begin(), destinations.end());

		int gh = G[h];

		for (int i = 0; i < destinations.size(); i++)
		{
			int dest = destinations[i];

			if (SOURCE[dest] == SOURCE[g] + gh + H[dest])
				cout << dest << " ";
			else if (SOURCE[dest] == SOURCE[h] + gh + G[dest])
				cout << dest << " ";
		}
		
		cout << "\n";
	}

	return 0;
}
```

# 풀이
처음에는 플로이드로 풀어보려 했는데 한 30퍼 쯤에서 틀려서 인터넷에 다른 사람들의 풀이를 참고한 결과 다익스트라를 s, g, h에서 각각 한번씩 최단거리를 구한 다음에 시작점에서 g 또는 h를 거쳐서 가는 경우의 거리가 시작지점에서 목적지점 까지 가는 거리랑 똑같을 경우 그 목적지를 출력해주면 된다. 생각보다 다익스트라를 여러번 쓰는 문제에 좀 익숙해져야겠다.