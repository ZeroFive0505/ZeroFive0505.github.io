---
layout: post
title: 동전 2
date: 2022-05-14 10:12:07 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/2294)
# 동전 2

# 문제
> n가지 종류의 동전이 있다. 이 동전들을 적당히 사용해서, 그 가치의 합이 k원이 되도록 하고 싶다. 그러면서 동전의 개수가 최소가 되도록 하려고 한다. 각각의 동전은 몇 개라도 사용할 수 있다.
사용한 동전의 구성이 같은데, 순서만 다른 것은 같은 경우이다.

# 입력
> 첫째 줄에 n, k가 주어진다. (1 ≤ n ≤ 100, 1 ≤ k ≤ 10,000) 다음 n개의 줄에는 각각의 동전의 가치가 주어진다. 동전의 가치는 100,000보다 작거나 같은 자연수이다. 가치가 같은 동전이 여러 번 주어질 수도 있다.

# 출력
> 첫째 줄에 사용한 동전의 최소 개수를 출력한다. 불가능한 경우에는 -1을 출력한다.

# 풀이
동전의 최대 가치를 기준으로 배열의 크기를 잡아야 했다. K의 범위로 배열 크기를 잡으니 바로 런타임 에러가 떴었다. 동전 문제와 비슷하지만 최소 갯수를 구해야하는 문제여서 큰 값으로 먼저 초기화를 한 후에 반복문을 돌면서 최소값을 갱신하는 방법으로 풀 수 있었다.

# 코드
```c++
#include <iostream>
#include <algorithm>

using namespace std;

const int MAXARR = 105;

const int MAX = 100005;

const int INF = 987654321;

int N, K;

int arr[MAXARR] = {};

int tab[MAX] = {};

int main()
{
	cin >> N >> K;

	for (int i = 1; i <= N; i++)
	{
		cin >> arr[i];
	}

	for (int i = 0; i < MAX; i++)
	{
		tab[i] = INF;
	}

    // 0원을 만드는 경우의 수 1
	tab[0] = 1;

	for (int i = 1; i <= N; i++)
	{
        // 누적이 아니라 1로 초기화
		tab[arr[i]] = 1;

        // arr[i]원부터 K원까지 반복한다.
		for (int j = arr[i]; j <= K; j++)
		{
            // 최소갯수를 갱신한다.
            // 배열에 현재 기록된 갯수에서 +1을 하는 것이 더 작은지 아님 현재 값이 더 작은지 비교
			tab[j] = min(tab[j - arr[i]] + 1, tab[j]);
		}
	}

	if (tab[K] == INF)
		cout << -1 << "\n";
	else
		cout << tab[K] << "\n";

	return 0;
}
```