---
layout: post
title: 숨바꼭질 백준(1697)
date: 2021-06-28 11:23:50 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/1697)
# 숨바꼭질

# 문제
> 수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다. 수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

# 입력
> 첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.

# 출력
> 수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.

```C++
#include <iostream>
#include <queue>
using namespace std;

const int SIZE = 100001;

bool VISITED[SIZE];

struct sPos
{
	int current;
	int cnt;
};

const int DELTA[3] = { -1, 1, 2 };

int main()
{
	int N, K;

	cin >> N >> K;

	queue<sPos> q;

	q.push({ N, 0 });

	VISITED[N] = true;


	bool found = false;
	int cnt = 0;
	while (!q.empty())
	{
		sPos cur = q.front();
		q.pop();
		int point = cur.current;
		int curCnt = cur.cnt;
		for (int i = 0; i < 3; i++)
		{
			int newPoint;
			if (i != 2)
				newPoint = point + DELTA[i];
			else
				newPoint = point * DELTA[i];

			if (point == K)
			{
				found = true;
				cnt = curCnt;
				break;
			}

			if (newPoint < 0 || newPoint >= SIZE)
				continue;

			if (VISITED[newPoint])
				continue;

			VISITED[newPoint] = true;
			q.push({ newPoint, curCnt + 1 });
		}
		

		if (found)
			break;
	}

	cout << cnt << "\n";

	return 0;
}
```

# 느낀점
최단거리를 찾아야하기에 BFS로 접근했다. 또한 다른 문제와 달리 앞뒤로 밖에 못 움직이기에 이를 고려해서 풀면 되는 문제였다.