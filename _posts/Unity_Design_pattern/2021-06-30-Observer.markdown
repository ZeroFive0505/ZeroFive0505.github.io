---
layout: post
title: Unity Observer pattern
date: 2021-06-30 13:45:10 +0900
categories: Unity DesignPattern
---

# Unity Observer 패턴

## 레이더를 이용한 Observer 패턴

크게 Event와 EventListener로 이루어졌다. Event의 코드는 아래와 같다.
```c#
using System.Collections.Generic;
using UnityEngine;

[CreateAssetMenu(fileName ="New Event", menuName ="Game Event", order = 52)]
public class Event : ScriptableObject
{
    // 현재 이 이벤트를 듣는 구독자들의 리스트
    private List<EventListener> eventListeners = new List<EventListener>();

    // 구독한다.
    public void Register(EventListener listener)
    {
        eventListeners.Add(listener);
    }
    
    // 구독을 취소한다.
    public void UnRegister(EventListener listener)
    {
        eventListeners.Remove(listener);
    }

    // 이벤트가 발생했을시 모든 구독자들에게 알린다.
    public void Occured(GameObject obj)
    {
        for(int i = 0; i < eventListeners.Count; i++)
        {
            eventListeners[i].OnEventOccurs(obj);
        }
    }
}
```

다음은 EventListener의 코드이다.

```c#
using UnityEngine;
using UnityEngine.Events;

// 보이드 형태의 이벤트가 아닌 GameObject를 받는 이벤트를 만듦.
[System.Serializable]
public class UnityGameObjectEvent : UnityEvent<GameObject>
{

}

public class EventListener : MonoBehaviour
{
    public Event item;
    public UnityGameObjectEvent response = new UnityGameObjectEvent();

    private void OnEnable()
    {
        item.Register(this);
    }

    private void OnDisable()
    {
        item.UnRegister(this);
    }
    
    // 이벤트가 발생했을시 동작한다. GameObject를 변수로 받는다.
    public void OnEventOccurs(GameObject obj)
    {
        response.Invoke(obj);
    }
}
```
# 결과

예제는 두가지 종류의 큐브를 이용해서 각각 아이템이 소환될때와 픽업될때의 이벤트를 만들고 레이더는 이 2가지 이벤트를 구독하게 했다.

![Image](https://user-images.githubusercontent.com/39051679/123892698-0ceb4880-d996-11eb-922a-41b52ff608b7.jpg)

이제 이 레이더는 두개의 이벤트를 구독하며 해당 이벤트가 발생했을시에는 레이더에 알맞은 함수를 호출하게 된다.

![Example](https://user-images.githubusercontent.com/39051679/123892960-7d926500-d996-11eb-9eee-b1a7cff5afdd.gif)

마우스를 누를때마다 랜덤한 위치에 큐브가 드랍되며 이 순간 레이더에 `ItemDropped`가 호출되며 만약 유저가 픽업 했을시에는 `ItemPickedUp`이 호출된다.