---
layout: post
title: Force
date: 2022-01-16 11:37:41 +0900
categories: DirectX
---

# Force
[이 동영상](https://www.youtube.com/watch?v=6vX8wT1G798&list=PLRqwX-V7Uu6YVljJvFRCyRM6mmF5wMPeE)의 강의에 Force 챕터를 보면서 배운 내용을 DirectX를 이용하여 시뮬레이션을 한 내용이다.

# Drag
먼저 식을 살펴보면 다음과 같다.
![Friction](https://miro.medium.com/max/780/1*itT1Bw7rvFVDt-KAR52SIQ.png)

p는 밀도, v는 속도, A영역의 넓이, 마지막으로 C는 항력의 계수이다. 

간단한 2D 시뮬레이션이므로
p, A, C를 간단한 상수로 변환해서 간단하게 -1을 곱하는 방법으로 항력을 적용할 수 있었다.

![Imgur](https://imgur.com/zDScCwh.gif)
위와같은 결과를 얻을 수 있었다. F = ma에서 a = F / m이 되는데 즉 질량이 적은 물체는 가속도가 더욱 높아진만큼 위의 식에서 속도의 제곱을 구할때 그만큼 더 강한 항력의 영향을 받게 되서 위와같이 일정영역에 도달하는 순간 질량이 큰 물체보다 훨씬 느리게 바닥에 도달했다.

코드는 다음과 같다.
```c++
...
size_t size = m_vecMovers.size();

	for (size_t i = 0; i < size; i++)
	{
        // 현재 물체의 방향을 구한다.
		Vector2 vel = m_vecMovers[i]->GetVelocity();
        // 방향을 구한다.
		Vector2 dir = vel;

        // 속도 스칼라 값을 구한다.
		float speed = vel.Length();

        // 정규화
		dir.Normalize();

		Vector2 drag = dir;

        // 항력 상수에 -를 취해서 현재 진행하고자 하는 방향에 반대 방향으로 힘을 작용시킨다.
		drag *= -m_DragConstant * speed * speed;

		m_vecMovers[i]->AddForce(drag * deltaTime);
	}
...
```

# Gravitational Attraction

![Image](https://natureofcode.com/book/imgs/chapter02/ch02_06.png)
> 출처: https://natureofcode.com/book/chapter-2-forces/

질량을 가지는 두 물체의 중력 작용의 식은 위와 같다.

G는 만유인력 상수, m1은 물체 m1의 질량, m2는 물체 m2의 질량 이 전체의 값을 거리의 제곱으로 나누고 유닛 방향벡터를 곱한다.

위와 같은 식으로 시뮬레이션을 돌린 결과는 다음과 같은 결과를 얻을 수 있었다.

![Imgur](https://imgur.com/izy5XP3.gif)

여기서 가운데의 있는 물체는 다른 물체에 대해서 만유인력에 의해서 끌려가지 않고 가운데에 위치하면서 모든 물체에 힘을 가한다.

코드는 다음과 같다.

```c++
...
if (m_Attractor)
	{   
        // 가운데의 Attractor는 모든 물체에 힘을 가한다.
		for (int i = 0; i < 5; i++)
		{
			m_Attractor->Attract((CGameObject*)m_Mover[i], deltaTime);
		}

		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 5; j++)
			{   
                // 자기자신은 건너뛴다.
				if (i == j)
					continue;

				float m1 = m_Mover[i]->GetMass();
				float m2 = m_Mover[j]->GetMass();

				Vector2 force;

                // 질량이 더 큰 방향으로 끌려가게 만든다.
				if (m1 > m2)
				{
					force = Vector2(m_Mover[i]->GetWorldPos().x - m_Mover[j]->GetWorldPos().x,
						m_Mover[i]->GetWorldPos().y - m_Mover[j]->GetWorldPos().y);
				}
				else
				{
					force = Vector2(m_Mover[j]->GetWorldPos().x - m_Mover[i]->GetWorldPos().x,
						m_Mover[j]->GetWorldPos().y - m_Mover[i]->GetWorldPos().y);
				}
				
                // 거리를 구한다.
				float dist = force.Length();

                // 거리를 일정한 값 이내에 유지시켜 너무 먼 거리에서의 힘의 영향에서 벗어나는것을 방지
				dist = std::fmax(5.0f, std::fmin(dist, 100.0f));

                // 위의 식을 그대로 적용한다.
				float strength = (m_G * m1 * m2) / (dist * dist);

				force.Normalize();

                // 방향에 힘을 곱해서 최종 결과를 만들어낸다.
				force *= strength;

				m_Mover[i]->AddForce(force * deltaTime);
			}
		}
	}
...
```