---
layout: post
title: 불! 백준(4179)
date: 2021-06-28 11:12:20 +0900
categories: Baekjoon
---

## 문제 링크 -> [Baekjoon](https://www.acmicpc.net/problem/4179)
# 불!

# 문제
> 지훈이는 미로에서 일을 한다. 지훈이를 미로에서 탈출하도록 도와주자! 미로에서의 지훈이의 위치와 불이 붙은 위치를 감안해서 지훈이가 불에 타기전에 탈출할 수 있는지의 여부, 그리고 얼마나 빨리 탈출할 수 있는지를 결정해야한다.
지훈이와 불은 매 분마다 한칸씩 수평또는 수직으로(비스듬하게 이동하지 않는다)  이동한다. 불은 각 지점에서 네 방향으로 확산된다. 지훈이는 미로의 가장자리에 접한 공간에서 탈출할 수 있다. 지훈이와 불은 벽이 있는 공간은 통과하지 못한다.

# 입력
> 입력의 첫째 줄에는 공백으로 구분된 두 정수 R과 C가 주어진다. 단, 1 ≤ R, C ≤ 1000 이다. R은 미로 행의 개수, C는 열의 개수이다.
다음 입력으로 R줄동안 각각의 미로 행이 주어진다. 각각의 문자들은 다음을 뜻한다.
> 1. **#: 벽**
> 2. **. : 지나갈 수 있는 공간**
> 3. **J: 지훈이의 미로에서의  초기위치 (지나갈 수 있는 공간)**
> 4. **F: 불이 난 공간**
> 5. **J는 입력에서 하나만 주어진다.**

# 출력
> 지훈이가 불이 도달하기 전에 미로를 탈출 할 수 없는 경우 IMPOSSIBLE 을 출력한다. 지훈이가 미로를 탈출할 수 있는 경우에는 가장 빠른 탈출시간을 출력한다. 

```C++
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

const int SIZE = 1000;

char MAZE[SIZE][SIZE];
int FIRES[SIZE][SIZE];
bool VISITED[SIZE][SIZE];

int R, C;

struct sPos
{
	int x;
	int y;

	sPos() 
	{
		x = 0;
		y = 0;
	}

	sPos(int x, int y) : x(x), y(y) {}

}Delta[] = {
	{-1, 0},
	{1, 0},
	{0, -1},
	{0, 1}
};

const int INF = 987654321;

int CanEscape(sPos start)
{
	queue<pair<pair<int, int>, int>> q;
	q.push(make_pair(make_pair(start.y, start.x), 0));
	VISITED[start.y][start.x] = true;

	while (!q.empty())
	{
		pair<pair<int, int>, int> current = q.front();
		q.pop();
		int y = current.first.first;
		int x = current.first.second;
		int curTime = current.second;

        // 만약 가장자리에 있다면 탈출이 가능하다. + 1 해서 리턴
		if (x == 0 || y == 0 || y == R - 1 || x == C - 1)
			return curTime + 1;

		for (int i = 0; i < 4; i++)
		{
			int ny = y + Delta[i].y;
			int nx = x + Delta[i].x;

			if (nx < 0 || ny < 0 || ny >= R || nx >= C)
				continue;

            // 방문했거나 벽이면 스킵.
			if (MAZE[ny][nx] == '#' || VISITED[ny][nx])
				continue;

            // 먼저 불을 BFS한 값이랑 비교했을때 현재의 시간 변수가 더 작다면 
            // 아직 이 시간대에는 이곳에 불이 번지지 않았다. 따라서 이동이 가능.
			if (FIRES[ny][nx] > curTime + 1)
			{
				VISITED[ny][nx] = true;
				q.push(make_pair(make_pair(ny, nx), curTime + 1));
			}
		}
	}

	return INF;
}

int main()
{

	cin >> R >> C;
	queue<sPos> fire_q;
	sPos start;

	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			FIRES[i][j] = INF;
			VISITED[i][j] = false;
		}
	}

	for (int i = 0; i < R; i++)
	{
		for (int j = 0; j < C; j++)
		{
			cin >> MAZE[i][j];
			if (MAZE[i][j] == 'F')
			{
				FIRES[i][j] = 0;
				fire_q.push(sPos(j, i));
			}
			else if (MAZE[i][j] == 'J')
			{
				start.x = j;
				start.y = i;
			}
		}
	}


    // 먼저 불들을 BFS로 확산시킨다. 이때 시간을 잘 기록해야함.
	while (!fire_q.empty())
	{
		sPos current = fire_q.front();
		fire_q.pop();
		int y = current.y;
		int x = current.x;
		for (int i = 0; i < 4; i++)
		{
			int ny = y + Delta[i].y;
			int nx = x + Delta[i].x;

			if (nx < 0 || ny < 0 || ny >= R || nx >= C)
				continue;

			if (MAZE[ny][nx] != '#')
			{
				if (FIRES[ny][nx] > FIRES[y][x] + 1)
				{
					FIRES[ny][nx] = FIRES[y][x] + 1;
					fire_q.push(sPos(nx, ny));
				}
			}
		}
	}
	
	int cnt = CanEscape(start);

	if (cnt == INF)
		cout << "IMPOSSIBLE\n";
	else
		cout << cnt << "\n";
		

	return 0;
}
```

# 느낀점
원래는 무한 루프를 돌면서 사람의 위치를 한번 BFS돌리고 그 위치들을 따로 벡터에 담고 또 불들을 BFS돌리면서 만약 사람의 위치에 겹친다면 위치를 담은 벡터에서 지우고 이런식으로 해서 풀었지만 시간초과가 떴다.. 그래서 다른 사람의 풀이법을 참고했는데 배열에 카운트를 먼저 기록하고 그 카운트보다 현재 카운드가 더 작다면 불이 번지지 않았다는 것으로 판단해서 움직이게 한다. 이런식으로 가장자리까지 갈 수 있다면 한 번 더 움직여서 탈출이 가능하니 그대로 카운트를 출력한다.